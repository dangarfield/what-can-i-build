
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
'use strict';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var modal = {exports: {}};

var util = {exports: {}};

/*!
  * Bootstrap index.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredUtil;

function requireUtil () {
	if (hasRequiredUtil) return util.exports;
	hasRequiredUtil = 1;
	(function (module, exports) {
		(function (global, factory) {
		  factory(exports) ;
		})(commonjsGlobal, (function (exports) {
		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): util/index.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */
		  const MAX_UID = 1000000;
		  const MILLISECONDS_MULTIPLIER = 1000;
		  const TRANSITION_END = 'transitionend'; // Shout-out Angus Croll (https://goo.gl/pxwQGp)

		  const toType = object => {
		    if (object === null || object === undefined) {
		      return `${object}`;
		    }

		    return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
		  };
		  /**
		   * Public Util API
		   */


		  const getUID = prefix => {
		    do {
		      prefix += Math.floor(Math.random() * MAX_UID);
		    } while (document.getElementById(prefix));

		    return prefix;
		  };

		  const getSelector = element => {
		    let selector = element.getAttribute('data-bs-target');

		    if (!selector || selector === '#') {
		      let hrefAttribute = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
		      // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
		      // `document.querySelector` will rightfully complain it is invalid.
		      // See https://github.com/twbs/bootstrap/issues/32273

		      if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) {
		        return null;
		      } // Just in case some CMS puts out a full URL with the anchor appended


		      if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {
		        hrefAttribute = `#${hrefAttribute.split('#')[1]}`;
		      }

		      selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;
		    }

		    return selector;
		  };

		  const getSelectorFromElement = element => {
		    const selector = getSelector(element);

		    if (selector) {
		      return document.querySelector(selector) ? selector : null;
		    }

		    return null;
		  };

		  const getElementFromSelector = element => {
		    const selector = getSelector(element);
		    return selector ? document.querySelector(selector) : null;
		  };

		  const getTransitionDurationFromElement = element => {
		    if (!element) {
		      return 0;
		    } // Get transition-duration of the element


		    let {
		      transitionDuration,
		      transitionDelay
		    } = window.getComputedStyle(element);
		    const floatTransitionDuration = Number.parseFloat(transitionDuration);
		    const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

		    if (!floatTransitionDuration && !floatTransitionDelay) {
		      return 0;
		    } // If multiple durations are defined, take the first


		    transitionDuration = transitionDuration.split(',')[0];
		    transitionDelay = transitionDelay.split(',')[0];
		    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
		  };

		  const triggerTransitionEnd = element => {
		    element.dispatchEvent(new Event(TRANSITION_END));
		  };

		  const isElement = object => {
		    if (!object || typeof object !== 'object') {
		      return false;
		    }

		    if (typeof object.jquery !== 'undefined') {
		      object = object[0];
		    }

		    return typeof object.nodeType !== 'undefined';
		  };

		  const getElement = object => {
		    // it's a jQuery object or a node element
		    if (isElement(object)) {
		      return object.jquery ? object[0] : object;
		    }

		    if (typeof object === 'string' && object.length > 0) {
		      return document.querySelector(object);
		    }

		    return null;
		  };

		  const isVisible = element => {
		    if (!isElement(element) || element.getClientRects().length === 0) {
		      return false;
		    }

		    const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'; // Handle `details` element as its content may falsie appear visible when it is closed

		    const closedDetails = element.closest('details:not([open])');

		    if (!closedDetails) {
		      return elementIsVisible;
		    }

		    if (closedDetails !== element) {
		      const summary = element.closest('summary');

		      if (summary && summary.parentNode !== closedDetails) {
		        return false;
		      }

		      if (summary === null) {
		        return false;
		      }
		    }

		    return elementIsVisible;
		  };

		  const isDisabled = element => {
		    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
		      return true;
		    }

		    if (element.classList.contains('disabled')) {
		      return true;
		    }

		    if (typeof element.disabled !== 'undefined') {
		      return element.disabled;
		    }

		    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
		  };

		  const findShadowRoot = element => {
		    if (!document.documentElement.attachShadow) {
		      return null;
		    } // Can find the shadow root otherwise it'll return the document


		    if (typeof element.getRootNode === 'function') {
		      const root = element.getRootNode();
		      return root instanceof ShadowRoot ? root : null;
		    }

		    if (element instanceof ShadowRoot) {
		      return element;
		    } // when we don't find a shadow root


		    if (!element.parentNode) {
		      return null;
		    }

		    return findShadowRoot(element.parentNode);
		  };

		  const noop = () => {};
		  /**
		   * Trick to restart an element's animation
		   *
		   * @param {HTMLElement} element
		   * @return void
		   *
		   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
		   */


		  const reflow = element => {
		    element.offsetHeight; // eslint-disable-line no-unused-expressions
		  };

		  const getjQuery = () => {
		    if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
		      return window.jQuery;
		    }

		    return null;
		  };

		  const DOMContentLoadedCallbacks = [];

		  const onDOMContentLoaded = callback => {
		    if (document.readyState === 'loading') {
		      // add listener on the first call when the document is in loading state
		      if (!DOMContentLoadedCallbacks.length) {
		        document.addEventListener('DOMContentLoaded', () => {
		          for (const callback of DOMContentLoadedCallbacks) {
		            callback();
		          }
		        });
		      }

		      DOMContentLoadedCallbacks.push(callback);
		    } else {
		      callback();
		    }
		  };

		  const isRTL = () => document.documentElement.dir === 'rtl';

		  const defineJQueryPlugin = plugin => {
		    onDOMContentLoaded(() => {
		      const $ = getjQuery();
		      /* istanbul ignore if */

		      if ($) {
		        const name = plugin.NAME;
		        const JQUERY_NO_CONFLICT = $.fn[name];
		        $.fn[name] = plugin.jQueryInterface;
		        $.fn[name].Constructor = plugin;

		        $.fn[name].noConflict = () => {
		          $.fn[name] = JQUERY_NO_CONFLICT;
		          return plugin.jQueryInterface;
		        };
		      }
		    });
		  };

		  const execute = callback => {
		    if (typeof callback === 'function') {
		      callback();
		    }
		  };

		  const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
		    if (!waitForTransition) {
		      execute(callback);
		      return;
		    }

		    const durationPadding = 5;
		    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
		    let called = false;

		    const handler = ({
		      target
		    }) => {
		      if (target !== transitionElement) {
		        return;
		      }

		      called = true;
		      transitionElement.removeEventListener(TRANSITION_END, handler);
		      execute(callback);
		    };

		    transitionElement.addEventListener(TRANSITION_END, handler);
		    setTimeout(() => {
		      if (!called) {
		        triggerTransitionEnd(transitionElement);
		      }
		    }, emulatedDuration);
		  };
		  /**
		   * Return the previous/next element of a list.
		   *
		   * @param {array} list    The list of elements
		   * @param activeElement   The active element
		   * @param shouldGetNext   Choose to get next or previous element
		   * @param isCycleAllowed
		   * @return {Element|elem} The proper element
		   */


		  const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
		    const listLength = list.length;
		    let index = list.indexOf(activeElement); // if the element does not exist in the list return an element
		    // depending on the direction and if cycle is allowed

		    if (index === -1) {
		      return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
		    }

		    index += shouldGetNext ? 1 : -1;

		    if (isCycleAllowed) {
		      index = (index + listLength) % listLength;
		    }

		    return list[Math.max(0, Math.min(index, listLength - 1))];
		  };

		  exports.defineJQueryPlugin = defineJQueryPlugin;
		  exports.execute = execute;
		  exports.executeAfterTransition = executeAfterTransition;
		  exports.findShadowRoot = findShadowRoot;
		  exports.getElement = getElement;
		  exports.getElementFromSelector = getElementFromSelector;
		  exports.getNextActiveElement = getNextActiveElement;
		  exports.getSelectorFromElement = getSelectorFromElement;
		  exports.getTransitionDurationFromElement = getTransitionDurationFromElement;
		  exports.getUID = getUID;
		  exports.getjQuery = getjQuery;
		  exports.isDisabled = isDisabled;
		  exports.isElement = isElement;
		  exports.isRTL = isRTL;
		  exports.isVisible = isVisible;
		  exports.noop = noop;
		  exports.onDOMContentLoaded = onDOMContentLoaded;
		  exports.reflow = reflow;
		  exports.toType = toType;
		  exports.triggerTransitionEnd = triggerTransitionEnd;

		  Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

		}));
		
} (util, util.exports));
	return util.exports;
}

var eventHandler = {exports: {}};

/*!
  * Bootstrap event-handler.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredEventHandler;

function requireEventHandler () {
	if (hasRequiredEventHandler) return eventHandler.exports;
	hasRequiredEventHandler = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory(requireUtil()) ;
		})(commonjsGlobal, (function (index) {
		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): dom/event-handler.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */
		  /**
		   * Constants
		   */

		  const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
		  const stripNameRegex = /\..*/;
		  const stripUidRegex = /::\d+$/;
		  const eventRegistry = {}; // Events storage

		  let uidEvent = 1;
		  const customEvents = {
		    mouseenter: 'mouseover',
		    mouseleave: 'mouseout'
		  };
		  const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
		  /**
		   * Private methods
		   */

		  function makeEventUid(element, uid) {
		    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
		  }

		  function getElementEvents(element) {
		    const uid = makeEventUid(element);
		    element.uidEvent = uid;
		    eventRegistry[uid] = eventRegistry[uid] || {};
		    return eventRegistry[uid];
		  }

		  function bootstrapHandler(element, fn) {
		    return function handler(event) {
		      hydrateObj(event, {
		        delegateTarget: element
		      });

		      if (handler.oneOff) {
		        EventHandler.off(element, event.type, fn);
		      }

		      return fn.apply(element, [event]);
		    };
		  }

		  function bootstrapDelegationHandler(element, selector, fn) {
		    return function handler(event) {
		      const domElements = element.querySelectorAll(selector);

		      for (let {
		        target
		      } = event; target && target !== this; target = target.parentNode) {
		        for (const domElement of domElements) {
		          if (domElement !== target) {
		            continue;
		          }

		          hydrateObj(event, {
		            delegateTarget: target
		          });

		          if (handler.oneOff) {
		            EventHandler.off(element, event.type, selector, fn);
		          }

		          return fn.apply(target, [event]);
		        }
		      }
		    };
		  }

		  function findHandler(events, callable, delegationSelector = null) {
		    return Object.values(events).find(event => event.callable === callable && event.delegationSelector === delegationSelector);
		  }

		  function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
		    const isDelegated = typeof handler === 'string'; // todo: tooltip passes `false` instead of selector, so we need to check

		    const callable = isDelegated ? delegationFunction : handler || delegationFunction;
		    let typeEvent = getTypeEvent(originalTypeEvent);

		    if (!nativeEvents.has(typeEvent)) {
		      typeEvent = originalTypeEvent;
		    }

		    return [isDelegated, callable, typeEvent];
		  }

		  function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
		    if (typeof originalTypeEvent !== 'string' || !element) {
		      return;
		    }

		    let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction); // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
		    // this prevents the handler from being dispatched the same way as mouseover or mouseout does

		    if (originalTypeEvent in customEvents) {
		      const wrapFunction = fn => {
		        return function (event) {
		          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
		            return fn.call(this, event);
		          }
		        };
		      };

		      callable = wrapFunction(callable);
		    }

		    const events = getElementEvents(element);
		    const handlers = events[typeEvent] || (events[typeEvent] = {});
		    const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);

		    if (previousFunction) {
		      previousFunction.oneOff = previousFunction.oneOff && oneOff;
		      return;
		    }

		    const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));
		    const fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
		    fn.delegationSelector = isDelegated ? handler : null;
		    fn.callable = callable;
		    fn.oneOff = oneOff;
		    fn.uidEvent = uid;
		    handlers[uid] = fn;
		    element.addEventListener(typeEvent, fn, isDelegated);
		  }

		  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
		    const fn = findHandler(events[typeEvent], handler, delegationSelector);

		    if (!fn) {
		      return;
		    }

		    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
		    delete events[typeEvent][fn.uidEvent];
		  }

		  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
		    const storeElementEvent = events[typeEvent] || {};

		    for (const handlerKey of Object.keys(storeElementEvent)) {
		      if (handlerKey.includes(namespace)) {
		        const event = storeElementEvent[handlerKey];
		        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
		      }
		    }
		  }

		  function getTypeEvent(event) {
		    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
		    event = event.replace(stripNameRegex, '');
		    return customEvents[event] || event;
		  }

		  const EventHandler = {
		    on(element, event, handler, delegationFunction) {
		      addHandler(element, event, handler, delegationFunction, false);
		    },

		    one(element, event, handler, delegationFunction) {
		      addHandler(element, event, handler, delegationFunction, true);
		    },

		    off(element, originalTypeEvent, handler, delegationFunction) {
		      if (typeof originalTypeEvent !== 'string' || !element) {
		        return;
		      }

		      const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
		      const inNamespace = typeEvent !== originalTypeEvent;
		      const events = getElementEvents(element);
		      const storeElementEvent = events[typeEvent] || {};
		      const isNamespace = originalTypeEvent.startsWith('.');

		      if (typeof callable !== 'undefined') {
		        // Simplest case: handler is passed, remove that listener ONLY.
		        if (!Object.keys(storeElementEvent).length) {
		          return;
		        }

		        removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
		        return;
		      }

		      if (isNamespace) {
		        for (const elementEvent of Object.keys(events)) {
		          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
		        }
		      }

		      for (const keyHandlers of Object.keys(storeElementEvent)) {
		        const handlerKey = keyHandlers.replace(stripUidRegex, '');

		        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
		          const event = storeElementEvent[keyHandlers];
		          removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
		        }
		      }
		    },

		    trigger(element, event, args) {
		      if (typeof event !== 'string' || !element) {
		        return null;
		      }

		      const $ = index.getjQuery();
		      const typeEvent = getTypeEvent(event);
		      const inNamespace = event !== typeEvent;
		      let jQueryEvent = null;
		      let bubbles = true;
		      let nativeDispatch = true;
		      let defaultPrevented = false;

		      if (inNamespace && $) {
		        jQueryEvent = $.Event(event, args);
		        $(element).trigger(jQueryEvent);
		        bubbles = !jQueryEvent.isPropagationStopped();
		        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
		        defaultPrevented = jQueryEvent.isDefaultPrevented();
		      }

		      let evt = new Event(event, {
		        bubbles,
		        cancelable: true
		      });
		      evt = hydrateObj(evt, args);

		      if (defaultPrevented) {
		        evt.preventDefault();
		      }

		      if (nativeDispatch) {
		        element.dispatchEvent(evt);
		      }

		      if (evt.defaultPrevented && jQueryEvent) {
		        jQueryEvent.preventDefault();
		      }

		      return evt;
		    }

		  };

		  function hydrateObj(obj, meta) {
		    for (const [key, value] of Object.entries(meta || {})) {
		      try {
		        obj[key] = value;
		      } catch (_unused) {
		        Object.defineProperty(obj, key, {
		          configurable: true,

		          get() {
		            return value;
		          }

		        });
		      }
		    }

		    return obj;
		  }

		  return EventHandler;

		}));
		
} (eventHandler));
	return eventHandler.exports;
}

var selectorEngine = {exports: {}};

/*!
  * Bootstrap selector-engine.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredSelectorEngine;

function requireSelectorEngine () {
	if (hasRequiredSelectorEngine) return selectorEngine.exports;
	hasRequiredSelectorEngine = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory(requireUtil()) ;
		})(commonjsGlobal, (function (index) {
		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): dom/selector-engine.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */
		  /**
		   * Constants
		   */

		  const SelectorEngine = {
		    find(selector, element = document.documentElement) {
		      return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
		    },

		    findOne(selector, element = document.documentElement) {
		      return Element.prototype.querySelector.call(element, selector);
		    },

		    children(element, selector) {
		      return [].concat(...element.children).filter(child => child.matches(selector));
		    },

		    parents(element, selector) {
		      const parents = [];
		      let ancestor = element.parentNode.closest(selector);

		      while (ancestor) {
		        parents.push(ancestor);
		        ancestor = ancestor.parentNode.closest(selector);
		      }

		      return parents;
		    },

		    prev(element, selector) {
		      let previous = element.previousElementSibling;

		      while (previous) {
		        if (previous.matches(selector)) {
		          return [previous];
		        }

		        previous = previous.previousElementSibling;
		      }

		      return [];
		    },

		    // TODO: this is now unused; remove later along with prev()
		    next(element, selector) {
		      let next = element.nextElementSibling;

		      while (next) {
		        if (next.matches(selector)) {
		          return [next];
		        }

		        next = next.nextElementSibling;
		      }

		      return [];
		    },

		    focusableChildren(element) {
		      const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(selector => `${selector}:not([tabindex^="-"])`).join(',');
		      return this.find(focusables, element).filter(el => !index.isDisabled(el) && index.isVisible(el));
		    }

		  };

		  return SelectorEngine;

		}));
		
} (selectorEngine));
	return selectorEngine.exports;
}

var scrollbar = {exports: {}};

var manipulator = {exports: {}};

/*!
  * Bootstrap manipulator.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredManipulator;

function requireManipulator () {
	if (hasRequiredManipulator) return manipulator.exports;
	hasRequiredManipulator = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory() ;
		})(commonjsGlobal, (function () {
		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): dom/manipulator.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */
		  function normalizeData(value) {
		    if (value === 'true') {
		      return true;
		    }

		    if (value === 'false') {
		      return false;
		    }

		    if (value === Number(value).toString()) {
		      return Number(value);
		    }

		    if (value === '' || value === 'null') {
		      return null;
		    }

		    if (typeof value !== 'string') {
		      return value;
		    }

		    try {
		      return JSON.parse(decodeURIComponent(value));
		    } catch (_unused) {
		      return value;
		    }
		  }

		  function normalizeDataKey(key) {
		    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);
		  }

		  const Manipulator = {
		    setDataAttribute(element, key, value) {
		      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
		    },

		    removeDataAttribute(element, key) {
		      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
		    },

		    getDataAttributes(element) {
		      if (!element) {
		        return {};
		      }

		      const attributes = {};
		      const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));

		      for (const key of bsKeys) {
		        let pureKey = key.replace(/^bs/, '');
		        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
		        attributes[pureKey] = normalizeData(element.dataset[key]);
		      }

		      return attributes;
		    },

		    getDataAttribute(element, key) {
		      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
		    }

		  };

		  return Manipulator;

		}));
		
} (manipulator));
	return manipulator.exports;
}

/*!
  * Bootstrap scrollbar.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredScrollbar;

function requireScrollbar () {
	if (hasRequiredScrollbar) return scrollbar.exports;
	hasRequiredScrollbar = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory(requireSelectorEngine(), requireManipulator(), requireUtil()) ;
		})(commonjsGlobal, (function (SelectorEngine, Manipulator, index) {
		  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

		  const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);
		  const Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);

		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): util/scrollBar.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */
		  /**
		   * Constants
		   */

		  const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
		  const SELECTOR_STICKY_CONTENT = '.sticky-top';
		  const PROPERTY_PADDING = 'padding-right';
		  const PROPERTY_MARGIN = 'margin-right';
		  /**
		   * Class definition
		   */

		  class ScrollBarHelper {
		    constructor() {
		      this._element = document.body;
		    } // Public


		    getWidth() {
		      // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
		      const documentWidth = document.documentElement.clientWidth;
		      return Math.abs(window.innerWidth - documentWidth);
		    }

		    hide() {
		      const width = this.getWidth();

		      this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width


		      this._setElementAttributes(this._element, PROPERTY_PADDING, calculatedValue => calculatedValue + width); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth


		      this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, calculatedValue => calculatedValue + width);

		      this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, calculatedValue => calculatedValue - width);
		    }

		    reset() {
		      this._resetElementAttributes(this._element, 'overflow');

		      this._resetElementAttributes(this._element, PROPERTY_PADDING);

		      this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);

		      this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
		    }

		    isOverflowing() {
		      return this.getWidth() > 0;
		    } // Private


		    _disableOverFlow() {
		      this._saveInitialAttribute(this._element, 'overflow');

		      this._element.style.overflow = 'hidden';
		    }

		    _setElementAttributes(selector, styleProperty, callback) {
		      const scrollbarWidth = this.getWidth();

		      const manipulationCallBack = element => {
		        if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
		          return;
		        }

		        this._saveInitialAttribute(element, styleProperty);

		        const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
		        element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
		      };

		      this._applyManipulationCallback(selector, manipulationCallBack);
		    }

		    _saveInitialAttribute(element, styleProperty) {
		      const actualValue = element.style.getPropertyValue(styleProperty);

		      if (actualValue) {
		        Manipulator__default.default.setDataAttribute(element, styleProperty, actualValue);
		      }
		    }

		    _resetElementAttributes(selector, styleProperty) {
		      const manipulationCallBack = element => {
		        const value = Manipulator__default.default.getDataAttribute(element, styleProperty); // We only want to remove the property if the value is `null`; the value can also be zero

		        if (value === null) {
		          element.style.removeProperty(styleProperty);
		          return;
		        }

		        Manipulator__default.default.removeDataAttribute(element, styleProperty);
		        element.style.setProperty(styleProperty, value);
		      };

		      this._applyManipulationCallback(selector, manipulationCallBack);
		    }

		    _applyManipulationCallback(selector, callBack) {
		      if (index.isElement(selector)) {
		        callBack(selector);
		        return;
		      }

		      for (const sel of SelectorEngine__default.default.find(selector, this._element)) {
		        callBack(sel);
		      }
		    }

		  }

		  return ScrollBarHelper;

		}));
		
} (scrollbar));
	return scrollbar.exports;
}

var baseComponent = {exports: {}};

var data = {exports: {}};

/*!
  * Bootstrap data.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredData;

function requireData () {
	if (hasRequiredData) return data.exports;
	hasRequiredData = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory() ;
		})(commonjsGlobal, (function () {
		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): dom/data.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */

		  /**
		   * Constants
		   */
		  const elementMap = new Map();
		  const data = {
		    set(element, key, instance) {
		      if (!elementMap.has(element)) {
		        elementMap.set(element, new Map());
		      }

		      const instanceMap = elementMap.get(element); // make it clear we only want one instance per element
		      // can be removed later when multiple key/instances are fine to be used

		      if (!instanceMap.has(key) && instanceMap.size !== 0) {
		        // eslint-disable-next-line no-console
		        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
		        return;
		      }

		      instanceMap.set(key, instance);
		    },

		    get(element, key) {
		      if (elementMap.has(element)) {
		        return elementMap.get(element).get(key) || null;
		      }

		      return null;
		    },

		    remove(element, key) {
		      if (!elementMap.has(element)) {
		        return;
		      }

		      const instanceMap = elementMap.get(element);
		      instanceMap.delete(key); // free up element references if there are no instances left for an element

		      if (instanceMap.size === 0) {
		        elementMap.delete(element);
		      }
		    }

		  };

		  return data;

		}));
		
} (data));
	return data.exports;
}

var config = {exports: {}};

/*!
  * Bootstrap config.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredConfig;

function requireConfig () {
	if (hasRequiredConfig) return config.exports;
	hasRequiredConfig = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory(requireUtil(), requireManipulator()) ;
		})(commonjsGlobal, (function (index, Manipulator) {
		  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

		  const Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);

		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): util/config.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */
		  /**
		   * Class definition
		   */

		  class Config {
		    // Getters
		    static get Default() {
		      return {};
		    }

		    static get DefaultType() {
		      return {};
		    }

		    static get NAME() {
		      throw new Error('You have to implement the static method "NAME", for each component!');
		    }

		    _getConfig(config) {
		      config = this._mergeConfigObj(config);
		      config = this._configAfterMerge(config);

		      this._typeCheckConfig(config);

		      return config;
		    }

		    _configAfterMerge(config) {
		      return config;
		    }

		    _mergeConfigObj(config, element) {
		      const jsonConfig = index.isElement(element) ? Manipulator__default.default.getDataAttribute(element, 'config') : {}; // try to parse

		      return { ...this.constructor.Default,
		        ...(typeof jsonConfig === 'object' ? jsonConfig : {}),
		        ...(index.isElement(element) ? Manipulator__default.default.getDataAttributes(element) : {}),
		        ...(typeof config === 'object' ? config : {})
		      };
		    }

		    _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {
		      for (const property of Object.keys(configTypes)) {
		        const expectedTypes = configTypes[property];
		        const value = config[property];
		        const valueType = index.isElement(value) ? 'element' : index.toType(value);

		        if (!new RegExp(expectedTypes).test(valueType)) {
		          throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
		        }
		      }
		    }

		  }

		  return Config;

		}));
		
} (config));
	return config.exports;
}

/*!
  * Bootstrap base-component.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredBaseComponent;

function requireBaseComponent () {
	if (hasRequiredBaseComponent) return baseComponent.exports;
	hasRequiredBaseComponent = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory(requireData(), requireUtil(), requireEventHandler(), requireConfig()) ;
		})(commonjsGlobal, (function (Data, index, EventHandler, Config) {
		  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

		  const Data__default = /*#__PURE__*/_interopDefaultLegacy(Data);
		  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);
		  const Config__default = /*#__PURE__*/_interopDefaultLegacy(Config);

		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): base-component.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */
		  /**
		   * Constants
		   */

		  const VERSION = '5.2.2';
		  /**
		   * Class definition
		   */

		  class BaseComponent extends Config__default.default {
		    constructor(element, config) {
		      super();
		      element = index.getElement(element);

		      if (!element) {
		        return;
		      }

		      this._element = element;
		      this._config = this._getConfig(config);
		      Data__default.default.set(this._element, this.constructor.DATA_KEY, this);
		    } // Public


		    dispose() {
		      Data__default.default.remove(this._element, this.constructor.DATA_KEY);
		      EventHandler__default.default.off(this._element, this.constructor.EVENT_KEY);

		      for (const propertyName of Object.getOwnPropertyNames(this)) {
		        this[propertyName] = null;
		      }
		    }

		    _queueCallback(callback, element, isAnimated = true) {
		      index.executeAfterTransition(callback, element, isAnimated);
		    }

		    _getConfig(config) {
		      config = this._mergeConfigObj(config, this._element);
		      config = this._configAfterMerge(config);

		      this._typeCheckConfig(config);

		      return config;
		    } // Static


		    static getInstance(element) {
		      return Data__default.default.get(index.getElement(element), this.DATA_KEY);
		    }

		    static getOrCreateInstance(element, config = {}) {
		      return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
		    }

		    static get VERSION() {
		      return VERSION;
		    }

		    static get DATA_KEY() {
		      return `bs.${this.NAME}`;
		    }

		    static get EVENT_KEY() {
		      return `.${this.DATA_KEY}`;
		    }

		    static eventName(name) {
		      return `${name}${this.EVENT_KEY}`;
		    }

		  }

		  return BaseComponent;

		}));
		
} (baseComponent));
	return baseComponent.exports;
}

var backdrop = {exports: {}};

/*!
  * Bootstrap backdrop.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredBackdrop;

function requireBackdrop () {
	if (hasRequiredBackdrop) return backdrop.exports;
	hasRequiredBackdrop = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory(requireEventHandler(), requireUtil(), requireConfig()) ;
		})(commonjsGlobal, (function (EventHandler, index, Config) {
		  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

		  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);
		  const Config__default = /*#__PURE__*/_interopDefaultLegacy(Config);

		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): util/backdrop.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */
		  /**
		   * Constants
		   */

		  const NAME = 'backdrop';
		  const CLASS_NAME_FADE = 'fade';
		  const CLASS_NAME_SHOW = 'show';
		  const EVENT_MOUSEDOWN = `mousedown.bs.${NAME}`;
		  const Default = {
		    className: 'modal-backdrop',
		    clickCallback: null,
		    isAnimated: false,
		    isVisible: true,
		    // if false, we use the backdrop helper without adding any element to the dom
		    rootElement: 'body' // give the choice to place backdrop under different elements

		  };
		  const DefaultType = {
		    className: 'string',
		    clickCallback: '(function|null)',
		    isAnimated: 'boolean',
		    isVisible: 'boolean',
		    rootElement: '(element|string)'
		  };
		  /**
		   * Class definition
		   */

		  class Backdrop extends Config__default.default {
		    constructor(config) {
		      super();
		      this._config = this._getConfig(config);
		      this._isAppended = false;
		      this._element = null;
		    } // Getters


		    static get Default() {
		      return Default;
		    }

		    static get DefaultType() {
		      return DefaultType;
		    }

		    static get NAME() {
		      return NAME;
		    } // Public


		    show(callback) {
		      if (!this._config.isVisible) {
		        index.execute(callback);
		        return;
		      }

		      this._append();

		      const element = this._getElement();

		      if (this._config.isAnimated) {
		        index.reflow(element);
		      }

		      element.classList.add(CLASS_NAME_SHOW);

		      this._emulateAnimation(() => {
		        index.execute(callback);
		      });
		    }

		    hide(callback) {
		      if (!this._config.isVisible) {
		        index.execute(callback);
		        return;
		      }

		      this._getElement().classList.remove(CLASS_NAME_SHOW);

		      this._emulateAnimation(() => {
		        this.dispose();
		        index.execute(callback);
		      });
		    }

		    dispose() {
		      if (!this._isAppended) {
		        return;
		      }

		      EventHandler__default.default.off(this._element, EVENT_MOUSEDOWN);

		      this._element.remove();

		      this._isAppended = false;
		    } // Private


		    _getElement() {
		      if (!this._element) {
		        const backdrop = document.createElement('div');
		        backdrop.className = this._config.className;

		        if (this._config.isAnimated) {
		          backdrop.classList.add(CLASS_NAME_FADE);
		        }

		        this._element = backdrop;
		      }

		      return this._element;
		    }

		    _configAfterMerge(config) {
		      // use getElement() with the default "body" to get a fresh Element on each instantiation
		      config.rootElement = index.getElement(config.rootElement);
		      return config;
		    }

		    _append() {
		      if (this._isAppended) {
		        return;
		      }

		      const element = this._getElement();

		      this._config.rootElement.append(element);

		      EventHandler__default.default.on(element, EVENT_MOUSEDOWN, () => {
		        index.execute(this._config.clickCallback);
		      });
		      this._isAppended = true;
		    }

		    _emulateAnimation(callback) {
		      index.executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
		    }

		  }

		  return Backdrop;

		}));
		
} (backdrop));
	return backdrop.exports;
}

var focustrap = {exports: {}};

/*!
  * Bootstrap focustrap.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredFocustrap;

function requireFocustrap () {
	if (hasRequiredFocustrap) return focustrap.exports;
	hasRequiredFocustrap = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory(requireEventHandler(), requireSelectorEngine(), requireConfig()) ;
		})(commonjsGlobal, (function (EventHandler, SelectorEngine, Config) {
		  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

		  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);
		  const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);
		  const Config__default = /*#__PURE__*/_interopDefaultLegacy(Config);

		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): util/focustrap.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */
		  /**
		   * Constants
		   */

		  const NAME = 'focustrap';
		  const DATA_KEY = 'bs.focustrap';
		  const EVENT_KEY = `.${DATA_KEY}`;
		  const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
		  const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY}`;
		  const TAB_KEY = 'Tab';
		  const TAB_NAV_FORWARD = 'forward';
		  const TAB_NAV_BACKWARD = 'backward';
		  const Default = {
		    autofocus: true,
		    trapElement: null // The element to trap focus inside of

		  };
		  const DefaultType = {
		    autofocus: 'boolean',
		    trapElement: 'element'
		  };
		  /**
		   * Class definition
		   */

		  class FocusTrap extends Config__default.default {
		    constructor(config) {
		      super();
		      this._config = this._getConfig(config);
		      this._isActive = false;
		      this._lastTabNavDirection = null;
		    } // Getters


		    static get Default() {
		      return Default;
		    }

		    static get DefaultType() {
		      return DefaultType;
		    }

		    static get NAME() {
		      return NAME;
		    } // Public


		    activate() {
		      if (this._isActive) {
		        return;
		      }

		      if (this._config.autofocus) {
		        this._config.trapElement.focus();
		      }

		      EventHandler__default.default.off(document, EVENT_KEY); // guard against infinite focus loop

		      EventHandler__default.default.on(document, EVENT_FOCUSIN, event => this._handleFocusin(event));
		      EventHandler__default.default.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));
		      this._isActive = true;
		    }

		    deactivate() {
		      if (!this._isActive) {
		        return;
		      }

		      this._isActive = false;
		      EventHandler__default.default.off(document, EVENT_KEY);
		    } // Private


		    _handleFocusin(event) {
		      const {
		        trapElement
		      } = this._config;

		      if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
		        return;
		      }

		      const elements = SelectorEngine__default.default.focusableChildren(trapElement);

		      if (elements.length === 0) {
		        trapElement.focus();
		      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
		        elements[elements.length - 1].focus();
		      } else {
		        elements[0].focus();
		      }
		    }

		    _handleKeydown(event) {
		      if (event.key !== TAB_KEY) {
		        return;
		      }

		      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
		    }

		  }

		  return FocusTrap;

		}));
		
} (focustrap));
	return focustrap.exports;
}

var componentFunctions = {exports: {}};

/*!
  * Bootstrap component-functions.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

var hasRequiredComponentFunctions;

function requireComponentFunctions () {
	if (hasRequiredComponentFunctions) return componentFunctions.exports;
	hasRequiredComponentFunctions = 1;
	(function (module, exports) {
		(function (global, factory) {
		  factory(exports, requireEventHandler(), requireUtil()) ;
		})(commonjsGlobal, (function (exports, EventHandler, index) {
		  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

		  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);

		  /**
		   * --------------------------------------------------------------------------
		   * Bootstrap (v5.2.2): util/component-functions.js
		   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
		   * --------------------------------------------------------------------------
		   */

		  const enableDismissTrigger = (component, method = 'hide') => {
		    const clickEvent = `click.dismiss${component.EVENT_KEY}`;
		    const name = component.NAME;
		    EventHandler__default.default.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function (event) {
		      if (['A', 'AREA'].includes(this.tagName)) {
		        event.preventDefault();
		      }

		      if (index.isDisabled(this)) {
		        return;
		      }

		      const target = index.getElementFromSelector(this) || this.closest(`.${name}`);
		      const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method

		      instance[method]();
		    });
		  };

		  exports.enableDismissTrigger = enableDismissTrigger;

		  Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

		}));
		
} (componentFunctions, componentFunctions.exports));
	return componentFunctions.exports;
}

/*!
  * Bootstrap modal.js v5.2.2 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

(function (module, exports) {
	(function (global, factory) {
	  module.exports = factory(requireUtil(), requireEventHandler(), requireSelectorEngine(), requireScrollbar(), requireBaseComponent(), requireBackdrop(), requireFocustrap(), requireComponentFunctions()) ;
	})(commonjsGlobal, (function (index, EventHandler, SelectorEngine, ScrollBarHelper, BaseComponent, Backdrop, FocusTrap, componentFunctions) {
	  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

	  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);
	  const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);
	  const ScrollBarHelper__default = /*#__PURE__*/_interopDefaultLegacy(ScrollBarHelper);
	  const BaseComponent__default = /*#__PURE__*/_interopDefaultLegacy(BaseComponent);
	  const Backdrop__default = /*#__PURE__*/_interopDefaultLegacy(Backdrop);
	  const FocusTrap__default = /*#__PURE__*/_interopDefaultLegacy(FocusTrap);

	  /**
	   * --------------------------------------------------------------------------
	   * Bootstrap (v5.2.2): modal.js
	   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
	   * --------------------------------------------------------------------------
	   */
	  /**
	   * Constants
	   */

	  const NAME = 'modal';
	  const DATA_KEY = 'bs.modal';
	  const EVENT_KEY = `.${DATA_KEY}`;
	  const DATA_API_KEY = '.data-api';
	  const ESCAPE_KEY = 'Escape';
	  const EVENT_HIDE = `hide${EVENT_KEY}`;
	  const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY}`;
	  const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
	  const EVENT_SHOW = `show${EVENT_KEY}`;
	  const EVENT_SHOWN = `shown${EVENT_KEY}`;
	  const EVENT_RESIZE = `resize${EVENT_KEY}`;
	  const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY}`;
	  const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY}`;
	  const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY}`;
	  const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;
	  const CLASS_NAME_OPEN = 'modal-open';
	  const CLASS_NAME_FADE = 'fade';
	  const CLASS_NAME_SHOW = 'show';
	  const CLASS_NAME_STATIC = 'modal-static';
	  const OPEN_SELECTOR = '.modal.show';
	  const SELECTOR_DIALOG = '.modal-dialog';
	  const SELECTOR_MODAL_BODY = '.modal-body';
	  const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="modal"]';
	  const Default = {
	    backdrop: true,
	    focus: true,
	    keyboard: true
	  };
	  const DefaultType = {
	    backdrop: '(boolean|string)',
	    focus: 'boolean',
	    keyboard: 'boolean'
	  };
	  /**
	   * Class definition
	   */

	  class Modal extends BaseComponent__default.default {
	    constructor(element, config) {
	      super(element, config);
	      this._dialog = SelectorEngine__default.default.findOne(SELECTOR_DIALOG, this._element);
	      this._backdrop = this._initializeBackDrop();
	      this._focustrap = this._initializeFocusTrap();
	      this._isShown = false;
	      this._isTransitioning = false;
	      this._scrollBar = new ScrollBarHelper__default.default();

	      this._addEventListeners();
	    } // Getters


	    static get Default() {
	      return Default;
	    }

	    static get DefaultType() {
	      return DefaultType;
	    }

	    static get NAME() {
	      return NAME;
	    } // Public


	    toggle(relatedTarget) {
	      return this._isShown ? this.hide() : this.show(relatedTarget);
	    }

	    show(relatedTarget) {
	      if (this._isShown || this._isTransitioning) {
	        return;
	      }

	      const showEvent = EventHandler__default.default.trigger(this._element, EVENT_SHOW, {
	        relatedTarget
	      });

	      if (showEvent.defaultPrevented) {
	        return;
	      }

	      this._isShown = true;
	      this._isTransitioning = true;

	      this._scrollBar.hide();

	      document.body.classList.add(CLASS_NAME_OPEN);

	      this._adjustDialog();

	      this._backdrop.show(() => this._showElement(relatedTarget));
	    }

	    hide() {
	      if (!this._isShown || this._isTransitioning) {
	        return;
	      }

	      const hideEvent = EventHandler__default.default.trigger(this._element, EVENT_HIDE);

	      if (hideEvent.defaultPrevented) {
	        return;
	      }

	      this._isShown = false;
	      this._isTransitioning = true;

	      this._focustrap.deactivate();

	      this._element.classList.remove(CLASS_NAME_SHOW);

	      this._queueCallback(() => this._hideModal(), this._element, this._isAnimated());
	    }

	    dispose() {
	      for (const htmlElement of [window, this._dialog]) {
	        EventHandler__default.default.off(htmlElement, EVENT_KEY);
	      }

	      this._backdrop.dispose();

	      this._focustrap.deactivate();

	      super.dispose();
	    }

	    handleUpdate() {
	      this._adjustDialog();
	    } // Private


	    _initializeBackDrop() {
	      return new Backdrop__default.default({
	        isVisible: Boolean(this._config.backdrop),
	        // 'static' option will be translated to true, and booleans will keep their value,
	        isAnimated: this._isAnimated()
	      });
	    }

	    _initializeFocusTrap() {
	      return new FocusTrap__default.default({
	        trapElement: this._element
	      });
	    }

	    _showElement(relatedTarget) {
	      // try to append dynamic modal
	      if (!document.body.contains(this._element)) {
	        document.body.append(this._element);
	      }

	      this._element.style.display = 'block';

	      this._element.removeAttribute('aria-hidden');

	      this._element.setAttribute('aria-modal', true);

	      this._element.setAttribute('role', 'dialog');

	      this._element.scrollTop = 0;
	      const modalBody = SelectorEngine__default.default.findOne(SELECTOR_MODAL_BODY, this._dialog);

	      if (modalBody) {
	        modalBody.scrollTop = 0;
	      }

	      index.reflow(this._element);

	      this._element.classList.add(CLASS_NAME_SHOW);

	      const transitionComplete = () => {
	        if (this._config.focus) {
	          this._focustrap.activate();
	        }

	        this._isTransitioning = false;
	        EventHandler__default.default.trigger(this._element, EVENT_SHOWN, {
	          relatedTarget
	        });
	      };

	      this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
	    }

	    _addEventListeners() {
	      EventHandler__default.default.on(this._element, EVENT_KEYDOWN_DISMISS, event => {
	        if (event.key !== ESCAPE_KEY) {
	          return;
	        }

	        if (this._config.keyboard) {
	          event.preventDefault();
	          this.hide();
	          return;
	        }

	        this._triggerBackdropTransition();
	      });
	      EventHandler__default.default.on(window, EVENT_RESIZE, () => {
	        if (this._isShown && !this._isTransitioning) {
	          this._adjustDialog();
	        }
	      });
	      EventHandler__default.default.on(this._element, EVENT_MOUSEDOWN_DISMISS, event => {
	        // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks
	        EventHandler__default.default.one(this._element, EVENT_CLICK_DISMISS, event2 => {
	          if (this._element !== event.target || this._element !== event2.target) {
	            return;
	          }

	          if (this._config.backdrop === 'static') {
	            this._triggerBackdropTransition();

	            return;
	          }

	          if (this._config.backdrop) {
	            this.hide();
	          }
	        });
	      });
	    }

	    _hideModal() {
	      this._element.style.display = 'none';

	      this._element.setAttribute('aria-hidden', true);

	      this._element.removeAttribute('aria-modal');

	      this._element.removeAttribute('role');

	      this._isTransitioning = false;

	      this._backdrop.hide(() => {
	        document.body.classList.remove(CLASS_NAME_OPEN);

	        this._resetAdjustments();

	        this._scrollBar.reset();

	        EventHandler__default.default.trigger(this._element, EVENT_HIDDEN);
	      });
	    }

	    _isAnimated() {
	      return this._element.classList.contains(CLASS_NAME_FADE);
	    }

	    _triggerBackdropTransition() {
	      const hideEvent = EventHandler__default.default.trigger(this._element, EVENT_HIDE_PREVENTED);

	      if (hideEvent.defaultPrevented) {
	        return;
	      }

	      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
	      const initialOverflowY = this._element.style.overflowY; // return if the following background transition hasn't yet completed

	      if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {
	        return;
	      }

	      if (!isModalOverflowing) {
	        this._element.style.overflowY = 'hidden';
	      }

	      this._element.classList.add(CLASS_NAME_STATIC);

	      this._queueCallback(() => {
	        this._element.classList.remove(CLASS_NAME_STATIC);

	        this._queueCallback(() => {
	          this._element.style.overflowY = initialOverflowY;
	        }, this._dialog);
	      }, this._dialog);

	      this._element.focus();
	    }
	    /**
	     * The following methods are used to handle overflowing modals
	     */


	    _adjustDialog() {
	      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

	      const scrollbarWidth = this._scrollBar.getWidth();

	      const isBodyOverflowing = scrollbarWidth > 0;

	      if (isBodyOverflowing && !isModalOverflowing) {
	        const property = index.isRTL() ? 'paddingLeft' : 'paddingRight';
	        this._element.style[property] = `${scrollbarWidth}px`;
	      }

	      if (!isBodyOverflowing && isModalOverflowing) {
	        const property = index.isRTL() ? 'paddingRight' : 'paddingLeft';
	        this._element.style[property] = `${scrollbarWidth}px`;
	      }
	    }

	    _resetAdjustments() {
	      this._element.style.paddingLeft = '';
	      this._element.style.paddingRight = '';
	    } // Static


	    static jQueryInterface(config, relatedTarget) {
	      return this.each(function () {
	        const data = Modal.getOrCreateInstance(this, config);

	        if (typeof config !== 'string') {
	          return;
	        }

	        if (typeof data[config] === 'undefined') {
	          throw new TypeError(`No method named "${config}"`);
	        }

	        data[config](relatedTarget);
	      });
	    }

	  }
	  /**
	   * Data API implementation
	   */


	  EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
	    const target = index.getElementFromSelector(this);

	    if (['A', 'AREA'].includes(this.tagName)) {
	      event.preventDefault();
	    }

	    EventHandler__default.default.one(target, EVENT_SHOW, showEvent => {
	      if (showEvent.defaultPrevented) {
	        // only register focus restorer if modal will actually get shown
	        return;
	      }

	      EventHandler__default.default.one(target, EVENT_HIDDEN, () => {
	        if (index.isVisible(this)) {
	          this.focus();
	        }
	      });
	    }); // avoid conflict when clicking modal toggler while another one is open

	    const alreadyOpen = SelectorEngine__default.default.findOne(OPEN_SELECTOR);

	    if (alreadyOpen) {
	      Modal.getInstance(alreadyOpen).hide();
	    }

	    const data = Modal.getOrCreateInstance(target);
	    data.toggle(this);
	  });
	  componentFunctions.enableDismissTrigger(Modal);
	  /**
	   * jQuery
	   */

	  index.defineJQueryPlugin(Modal);

	  return Modal;

	}));
	
} (modal));

var Modal = modal.exports;

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @ignore */
var ENTRIES = 'ENTRIES';
/** @ignore */
var KEYS = 'KEYS';
/** @ignore */
var VALUES = 'VALUES';
/** @ignore */
var LEAF = '';
/**
 * @private
 */
var TreeIterator = /** @class */ (function () {
    function TreeIterator(set, type) {
        var node = set._tree;
        var keys = Array.from(node.keys());
        this.set = set;
        this._type = type;
        this._path = keys.length > 0 ? [{ node: node, keys: keys }] : [];
    }
    TreeIterator.prototype.next = function () {
        var value = this.dive();
        this.backtrack();
        return value;
    };
    TreeIterator.prototype.dive = function () {
        if (this._path.length === 0) {
            return { done: true, value: undefined };
        }
        var _a = last$1(this._path), node = _a.node, keys = _a.keys;
        if (last$1(keys) === LEAF) {
            return { done: false, value: this.result() };
        }
        var child = node.get(last$1(keys));
        this._path.push({ node: child, keys: Array.from(child.keys()) });
        return this.dive();
    };
    TreeIterator.prototype.backtrack = function () {
        if (this._path.length === 0) {
            return;
        }
        var keys = last$1(this._path).keys;
        keys.pop();
        if (keys.length > 0) {
            return;
        }
        this._path.pop();
        this.backtrack();
    };
    TreeIterator.prototype.key = function () {
        return this.set._prefix + this._path
            .map(function (_a) {
            var keys = _a.keys;
            return last$1(keys);
        })
            .filter(function (key) { return key !== LEAF; })
            .join('');
    };
    TreeIterator.prototype.value = function () {
        return last$1(this._path).node.get(LEAF);
    };
    TreeIterator.prototype.result = function () {
        switch (this._type) {
            case VALUES: return this.value();
            case KEYS: return this.key();
            default: return [this.key(), this.value()];
        }
    };
    TreeIterator.prototype[Symbol.iterator] = function () {
        return this;
    };
    return TreeIterator;
}());
var last$1 = function (array) {
    return array[array.length - 1];
};

/**
 * @ignore
 */
var fuzzySearch = function (node, query, maxDistance) {
    var results = new Map();
    if (query === undefined)
        return results;
    // Number of columns in the Levenshtein matrix.
    var n = query.length + 1;
    // Matching terms can never be longer than N + maxDistance.
    var m = n + maxDistance;
    // Fill first matrix row and column with numbers: 0 1 2 3 ...
    var matrix = new Uint8Array(m * n).fill(maxDistance + 1);
    for (var j = 0; j < n; ++j)
        matrix[j] = j;
    for (var i = 1; i < m; ++i)
        matrix[i * n] = i;
    recurse(node, query, maxDistance, results, matrix, 1, n, '');
    return results;
};
// Modified version of http://stevehanov.ca/blog/?id=114
// This builds a Levenshtein matrix for a given query and continuously updates
// it for nodes in the radix tree that fall within the given maximum edit
// distance. Keeping the same matrix around is beneficial especially for larger
// edit distances.
//
//           k   a   t   e   <-- query
//       0   1   2   3   4
//   c   1   1   2   3   4
//   a   2   2   1   2   3
//   t   3   3   2   1  [2]  <-- edit distance
//   ^
//   ^ term in radix tree, rows are added and removed as needed
var recurse = function (node, query, maxDistance, results, matrix, m, n, prefix) {
    var e_1, _a;
    var offset = m * n;
    try {
        key: for (var _b = __values(node.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            if (key === LEAF) {
                // We've reached a leaf node. Check if the edit distance acceptable and
                // store the result if it is.
                var distance = matrix[offset - 1];
                if (distance <= maxDistance) {
                    results.set(prefix, [node.get(key), distance]);
                }
            }
            else {
                // Iterate over all characters in the key. Update the Levenshtein matrix
                // and check if the minimum distance in the last row is still within the
                // maximum edit distance. If it is, we can recurse over all child nodes.
                var i = m;
                for (var pos = 0; pos < key.length; ++pos, ++i) {
                    var char = key[pos];
                    var thisRowOffset = n * i;
                    var prevRowOffset = thisRowOffset - n;
                    // Set the first column based on the previous row, and initialize the
                    // minimum distance in the current row.
                    var minDistance = matrix[thisRowOffset];
                    var jmin = Math.max(0, i - maxDistance - 1);
                    var jmax = Math.min(n - 1, i + maxDistance);
                    // Iterate over remaining columns (characters in the query).
                    for (var j = jmin; j < jmax; ++j) {
                        var different = char !== query[j];
                        // It might make sense to only read the matrix positions used for
                        // deletion/insertion if the characters are different. But we want to
                        // avoid conditional reads for performance reasons.
                        var rpl = matrix[prevRowOffset + j] + +different;
                        var del = matrix[prevRowOffset + j + 1] + 1;
                        var ins = matrix[thisRowOffset + j] + 1;
                        var dist = matrix[thisRowOffset + j + 1] = Math.min(rpl, del, ins);
                        if (dist < minDistance)
                            minDistance = dist;
                    }
                    // Because distance will never decrease, we can stop. There will be no
                    // matching child nodes.
                    if (minDistance > maxDistance) {
                        continue key;
                    }
                }
                recurse(node.get(key), query, maxDistance, results, matrix, i, n, prefix + key);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
};

/**
 * A class implementing the same interface as a standard JavaScript
 * [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)
 * with string keys, but adding support for efficiently searching entries with
 * prefix or fuzzy search. This class is used internally by [[MiniSearch]] as
 * the inverted index data structure. The implementation is a radix tree
 * (compressed prefix tree).
 *
 * Since this class can be of general utility beyond _MiniSearch_, it is
 * exported by the `minisearch` package and can be imported (or required) as
 * `minisearch/SearchableMap`.
 *
 * @typeParam T  The type of the values stored in the map.
 */
var SearchableMap = /** @class */ (function () {
    /**
     * The constructor is normally called without arguments, creating an empty
     * map. In order to create a [[SearchableMap]] from an iterable or from an
     * object, check [[SearchableMap.from]] and [[SearchableMap.fromObject]].
     *
     * The constructor arguments are for internal use, when creating derived
     * mutable views of a map at a prefix.
     */
    function SearchableMap(tree, prefix) {
        if (tree === void 0) { tree = new Map(); }
        if (prefix === void 0) { prefix = ''; }
        this._size = undefined;
        this._tree = tree;
        this._prefix = prefix;
    }
    /**
     * Creates and returns a mutable view of this [[SearchableMap]], containing only
     * entries that share the given prefix.
     *
     * ### Usage:
     *
     * ```javascript
     * let map = new SearchableMap()
     * map.set("unicorn", 1)
     * map.set("universe", 2)
     * map.set("university", 3)
     * map.set("unique", 4)
     * map.set("hello", 5)
     *
     * let uni = map.atPrefix("uni")
     * uni.get("unique") // => 4
     * uni.get("unicorn") // => 1
     * uni.get("hello") // => undefined
     *
     * let univer = map.atPrefix("univer")
     * univer.get("unique") // => undefined
     * univer.get("universe") // => 2
     * univer.get("university") // => 3
     * ```
     *
     * @param prefix  The prefix
     * @return A [[SearchableMap]] representing a mutable view of the original Map at the given prefix
     */
    SearchableMap.prototype.atPrefix = function (prefix) {
        var e_1, _a;
        if (!prefix.startsWith(this._prefix)) {
            throw new Error('Mismatched prefix');
        }
        var _b = __read(trackDown(this._tree, prefix.slice(this._prefix.length)), 2), node = _b[0], path = _b[1];
        if (node === undefined) {
            var _c = __read(last(path), 2), parentNode = _c[0], key = _c[1];
            try {
                for (var _d = __values(parentNode.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var k = _e.value;
                    if (k !== LEAF && k.startsWith(key)) {
                        var node_1 = new Map();
                        node_1.set(k.slice(key.length), parentNode.get(k));
                        return new SearchableMap(node_1, prefix);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return new SearchableMap(node, prefix);
    };
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear
     */
    SearchableMap.prototype.clear = function () {
        this._size = undefined;
        this._tree.clear();
    };
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete
     * @param key  Key to delete
     */
    SearchableMap.prototype.delete = function (key) {
        this._size = undefined;
        return remove(this._tree, key);
    };
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries
     * @return An iterator iterating through `[key, value]` entries.
     */
    SearchableMap.prototype.entries = function () {
        return new TreeIterator(this, ENTRIES);
    };
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach
     * @param fn  Iteration function
     */
    SearchableMap.prototype.forEach = function (fn) {
        var e_2, _a;
        try {
            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                fn(key, value, this);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * Returns a Map of all the entries that have a key within the given edit
     * distance from the search key. The keys of the returned Map are the matching
     * keys, while the values are two-element arrays where the first element is
     * the value associated to the key, and the second is the edit distance of the
     * key to the search key.
     *
     * ### Usage:
     *
     * ```javascript
     * let map = new SearchableMap()
     * map.set('hello', 'world')
     * map.set('hell', 'yeah')
     * map.set('ciao', 'mondo')
     *
     * // Get all entries that match the key 'hallo' with a maximum edit distance of 2
     * map.fuzzyGet('hallo', 2)
     * // => Map(2) { 'hello' => ['world', 1], 'hell' => ['yeah', 2] }
     *
     * // In the example, the "hello" key has value "world" and edit distance of 1
     * // (change "e" to "a"), the key "hell" has value "yeah" and edit distance of 2
     * // (change "e" to "a", delete "o")
     * ```
     *
     * @param key  The search key
     * @param maxEditDistance  The maximum edit distance (Levenshtein)
     * @return A Map of the matching keys to their value and edit distance
     */
    SearchableMap.prototype.fuzzyGet = function (key, maxEditDistance) {
        return fuzzySearch(this._tree, key, maxEditDistance);
    };
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get
     * @param key  Key to get
     * @return Value associated to the key, or `undefined` if the key is not
     * found.
     */
    SearchableMap.prototype.get = function (key) {
        var node = lookup(this._tree, key);
        return node !== undefined ? node.get(LEAF) : undefined;
    };
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has
     * @param key  Key
     * @return True if the key is in the map, false otherwise
     */
    SearchableMap.prototype.has = function (key) {
        var node = lookup(this._tree, key);
        return node !== undefined && node.has(LEAF);
    };
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys
     * @return An `Iterable` iterating through keys
     */
    SearchableMap.prototype.keys = function () {
        return new TreeIterator(this, KEYS);
    };
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set
     * @param key  Key to set
     * @param value  Value to associate to the key
     * @return The [[SearchableMap]] itself, to allow chaining
     */
    SearchableMap.prototype.set = function (key, value) {
        if (typeof key !== 'string') {
            throw new Error('key must be a string');
        }
        this._size = undefined;
        var node = createPath(this._tree, key);
        node.set(LEAF, value);
        return this;
    };
    Object.defineProperty(SearchableMap.prototype, "size", {
        /**
         * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size
         */
        get: function () {
            if (this._size) {
                return this._size;
            }
            /** @ignore */
            this._size = 0;
            var iter = this.entries();
            while (!iter.next().done)
                this._size += 1;
            return this._size;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Updates the value at the given key using the provided function. The function
     * is called with the current value at the key, and its return value is used as
     * the new value to be set.
     *
     * ### Example:
     *
     * ```javascript
     * // Increment the current value by one
     * searchableMap.update('somekey', (currentValue) => currentValue == null ? 0 : currentValue + 1)
     * ```
     *
     * If the value at the given key is or will be an object, it might not require
     * re-assignment. In that case it is better to use `fetch()`, because it is
     * faster.
     *
     * @param key  The key to update
     * @param fn  The function used to compute the new value from the current one
     * @return The [[SearchableMap]] itself, to allow chaining
     */
    SearchableMap.prototype.update = function (key, fn) {
        if (typeof key !== 'string') {
            throw new Error('key must be a string');
        }
        this._size = undefined;
        var node = createPath(this._tree, key);
        node.set(LEAF, fn(node.get(LEAF)));
        return this;
    };
    /**
     * Fetches the value of the given key. If the value does not exist, calls the
     * given function to create a new value, which is inserted at the given key
     * and subsequently returned.
     *
     * ### Example:
     *
     * ```javascript
     * const map = searchableMap.fetch('somekey', () => new Map())
     * map.set('foo', 'bar')
     * ```
     *
     * @param key  The key to update
     * @param defaultValue  A function that creates a new value if the key does not exist
     * @return The existing or new value at the given key
     */
    SearchableMap.prototype.fetch = function (key, initial) {
        if (typeof key !== 'string') {
            throw new Error('key must be a string');
        }
        this._size = undefined;
        var node = createPath(this._tree, key);
        var value = node.get(LEAF);
        if (value === undefined) {
            node.set(LEAF, value = initial());
        }
        return value;
    };
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values
     * @return An `Iterable` iterating through values.
     */
    SearchableMap.prototype.values = function () {
        return new TreeIterator(this, VALUES);
    };
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator
     */
    SearchableMap.prototype[Symbol.iterator] = function () {
        return this.entries();
    };
    /**
     * Creates a [[SearchableMap]] from an `Iterable` of entries
     *
     * @param entries  Entries to be inserted in the [[SearchableMap]]
     * @return A new [[SearchableMap]] with the given entries
     */
    SearchableMap.from = function (entries) {
        var e_3, _a;
        var tree = new SearchableMap();
        try {
            for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                var _b = __read(entries_1_1.value, 2), key = _b[0], value = _b[1];
                tree.set(key, value);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return tree;
    };
    /**
     * Creates a [[SearchableMap]] from the iterable properties of a JavaScript object
     *
     * @param object  Object of entries for the [[SearchableMap]]
     * @return A new [[SearchableMap]] with the given entries
     */
    SearchableMap.fromObject = function (object) {
        return SearchableMap.from(Object.entries(object));
    };
    return SearchableMap;
}());
var trackDown = function (tree, key, path) {
    var e_4, _a;
    if (path === void 0) { path = []; }
    if (key.length === 0 || tree == null) {
        return [tree, path];
    }
    try {
        for (var _b = __values(tree.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var k = _c.value;
            if (k !== LEAF && key.startsWith(k)) {
                path.push([tree, k]); // performance: update in place
                return trackDown(tree.get(k), key.slice(k.length), path);
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_4) throw e_4.error; }
    }
    path.push([tree, key]); // performance: update in place
    return trackDown(undefined, '', path);
};
var lookup = function (tree, key) {
    var e_5, _a;
    if (key.length === 0 || tree == null) {
        return tree;
    }
    try {
        for (var _b = __values(tree.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var k = _c.value;
            if (k !== LEAF && key.startsWith(k)) {
                return lookup(tree.get(k), key.slice(k.length));
            }
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_5) throw e_5.error; }
    }
};
// Create a path in the radix tree for the given key, and returns the deepest
// node. This function is in the hot path for indexing. It avoids unnecessary
// string operations and recursion for performance.
var createPath = function (node, key) {
    var e_6, _a;
    var keyLength = key.length;
    outer: for (var pos = 0; node && pos < keyLength;) {
        try {
            for (var _b = (e_6 = void 0, __values(node.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {
                var k = _c.value;
                // Check whether this key is a candidate: the first characters must match.
                if (k !== LEAF && key[pos] === k[0]) {
                    var len = Math.min(keyLength - pos, k.length);
                    // Advance offset to the point where key and k no longer match.
                    var offset = 1;
                    while (offset < len && key[pos + offset] === k[offset])
                        ++offset;
                    var child_1 = node.get(k);
                    if (offset === k.length) {
                        // The existing key is shorter than the key we need to create.
                        node = child_1;
                    }
                    else {
                        // Partial match: we need to insert an intermediate node to contain
                        // both the existing subtree and the new node.
                        var intermediate = new Map();
                        intermediate.set(k.slice(offset), child_1);
                        node.set(key.slice(pos, pos + offset), intermediate);
                        node.delete(k);
                        node = intermediate;
                    }
                    pos += offset;
                    continue outer;
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
        // Create a final child node to contain the final suffix of the key.
        var child = new Map();
        node.set(key.slice(pos), child);
        return child;
    }
    return node;
};
var remove = function (tree, key) {
    var _a = __read(trackDown(tree, key), 2), node = _a[0], path = _a[1];
    if (node === undefined) {
        return;
    }
    node.delete(LEAF);
    if (node.size === 0) {
        cleanup(path);
    }
    else if (node.size === 1) {
        var _b = __read(node.entries().next().value, 2), key_1 = _b[0], value = _b[1];
        merge(path, key_1, value);
    }
};
var cleanup = function (path) {
    if (path.length === 0) {
        return;
    }
    var _a = __read(last(path), 2), node = _a[0], key = _a[1];
    node.delete(key);
    if (node.size === 0) {
        cleanup(path.slice(0, -1));
    }
    else if (node.size === 1) {
        var _b = __read(node.entries().next().value, 2), key_2 = _b[0], value = _b[1];
        if (key_2 !== LEAF) {
            merge(path.slice(0, -1), key_2, value);
        }
    }
};
var merge = function (path, key, value) {
    if (path.length === 0) {
        return;
    }
    var _a = __read(last(path), 2), node = _a[0], nodeKey = _a[1];
    node.set(nodeKey + key, value);
    node.delete(nodeKey);
};
var last = function (array) {
    return array[array.length - 1];
};

var _a;
var OR = 'or';
var AND = 'and';
var AND_NOT = 'and_not';
/**
 * [[MiniSearch]] is the main entrypoint class, implementing a full-text search
 * engine in memory.
 *
 * @typeParam T  The type of the documents being indexed.
 *
 * ### Basic example:
 *
 * ```javascript
 * const documents = [
 *   {
 *     id: 1,
 *     title: 'Moby Dick',
 *     text: 'Call me Ishmael. Some years ago...',
 *     category: 'fiction'
 *   },
 *   {
 *     id: 2,
 *     title: 'Zen and the Art of Motorcycle Maintenance',
 *     text: 'I can see by my watch...',
 *     category: 'fiction'
 *   },
 *   {
 *     id: 3,
 *     title: 'Neuromancer',
 *     text: 'The sky above the port was...',
 *     category: 'fiction'
 *   },
 *   {
 *     id: 4,
 *     title: 'Zen and the Art of Archery',
 *     text: 'At first sight it must seem...',
 *     category: 'non-fiction'
 *   },
 *   // ...and more
 * ]
 *
 * // Create a search engine that indexes the 'title' and 'text' fields for
 * // full-text search. Search results will include 'title' and 'category' (plus the
 * // id field, that is always stored and returned)
 * const miniSearch = new MiniSearch({
 *   fields: ['title', 'text'],
 *   storeFields: ['title', 'category']
 * })
 *
 * // Add documents to the index
 * miniSearch.addAll(documents)
 *
 * // Search for documents:
 * let results = miniSearch.search('zen art motorcycle')
 * // => [
 * //   { id: 2, title: 'Zen and the Art of Motorcycle Maintenance', category: 'fiction', score: 2.77258 },
 * //   { id: 4, title: 'Zen and the Art of Archery', category: 'non-fiction', score: 1.38629 }
 * // ]
 * ```
 */
var MiniSearch = /** @class */ (function () {
    /**
     * @param options  Configuration options
     *
     * ### Examples:
     *
     * ```javascript
     * // Create a search engine that indexes the 'title' and 'text' fields of your
     * // documents:
     * const miniSearch = new MiniSearch({ fields: ['title', 'text'] })
     * ```
     *
     * ### ID Field:
     *
     * ```javascript
     * // Your documents are assumed to include a unique 'id' field, but if you want
     * // to use a different field for document identification, you can set the
     * // 'idField' option:
     * const miniSearch = new MiniSearch({ idField: 'key', fields: ['title', 'text'] })
     * ```
     *
     * ### Options and defaults:
     *
     * ```javascript
     * // The full set of options (here with their default value) is:
     * const miniSearch = new MiniSearch({
     *   // idField: field that uniquely identifies a document
     *   idField: 'id',
     *
     *   // extractField: function used to get the value of a field in a document.
     *   // By default, it assumes the document is a flat object with field names as
     *   // property keys and field values as string property values, but custom logic
     *   // can be implemented by setting this option to a custom extractor function.
     *   extractField: (document, fieldName) => document[fieldName],
     *
     *   // tokenize: function used to split fields into individual terms. By
     *   // default, it is also used to tokenize search queries, unless a specific
     *   // `tokenize` search option is supplied. When tokenizing an indexed field,
     *   // the field name is passed as the second argument.
     *   tokenize: (string, _fieldName) => string.split(SPACE_OR_PUNCTUATION),
     *
     *   // processTerm: function used to process each tokenized term before
     *   // indexing. It can be used for stemming and normalization. Return a falsy
     *   // value in order to discard a term. By default, it is also used to process
     *   // search queries, unless a specific `processTerm` option is supplied as a
     *   // search option. When processing a term from a indexed field, the field
     *   // name is passed as the second argument.
     *   processTerm: (term, _fieldName) => term.toLowerCase(),
     *
     *   // searchOptions: default search options, see the `search` method for
     *   // details
     *   searchOptions: undefined,
     *
     *   // fields: document fields to be indexed. Mandatory, but not set by default
     *   fields: undefined
     *
     *   // storeFields: document fields to be stored and returned as part of the
     *   // search results.
     *   storeFields: []
     * })
     * ```
     */
    function MiniSearch(options) {
        if ((options === null || options === void 0 ? void 0 : options.fields) == null) {
            throw new Error('MiniSearch: option "fields" must be provided');
        }
        this._options = __assign(__assign(__assign({}, defaultOptions), options), { searchOptions: __assign(__assign({}, defaultSearchOptions), (options.searchOptions || {})), autoSuggestOptions: __assign(__assign({}, defaultAutoSuggestOptions), (options.autoSuggestOptions || {})) });
        this._index = new SearchableMap();
        this._documentCount = 0;
        this._documentIds = new Map();
        // Fields are defined during initialization, don't change, are few in
        // number, rarely need iterating over, and have string keys. Therefore in
        // this case an object is a better candidate than a Map to store the mapping
        // from field key to ID.
        this._fieldIds = {};
        this._fieldLength = new Map();
        this._avgFieldLength = [];
        this._nextId = 0;
        this._storedFields = new Map();
        this.addFields(this._options.fields);
    }
    /**
     * Adds a document to the index
     *
     * @param document  The document to be indexed
     */
    MiniSearch.prototype.add = function (document) {
        var e_1, _a, e_2, _b;
        var _c = this._options, extractField = _c.extractField, tokenize = _c.tokenize, processTerm = _c.processTerm, fields = _c.fields, idField = _c.idField;
        var id = extractField(document, idField);
        if (id == null) {
            throw new Error("MiniSearch: document does not have ID field \"".concat(idField, "\""));
        }
        var shortDocumentId = this.addDocumentId(id);
        this.saveStoredFields(shortDocumentId, document);
        try {
            for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var field = fields_1_1.value;
                var fieldValue = extractField(document, field);
                if (fieldValue == null)
                    continue;
                var tokens = tokenize(fieldValue.toString(), field);
                var fieldId = this._fieldIds[field];
                var uniqueTerms = new Set(tokens).size;
                this.addFieldLength(shortDocumentId, fieldId, this._documentCount - 1, uniqueTerms);
                try {
                    for (var tokens_1 = (e_2 = void 0, __values(tokens)), tokens_1_1 = tokens_1.next(); !tokens_1_1.done; tokens_1_1 = tokens_1.next()) {
                        var term = tokens_1_1.value;
                        var processedTerm = processTerm(term, field);
                        if (processedTerm) {
                            this.addTerm(fieldId, shortDocumentId, processedTerm);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (tokens_1_1 && !tokens_1_1.done && (_b = tokens_1.return)) _b.call(tokens_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Adds all the given documents to the index
     *
     * @param documents  An array of documents to be indexed
     */
    MiniSearch.prototype.addAll = function (documents) {
        var e_3, _a;
        try {
            for (var documents_1 = __values(documents), documents_1_1 = documents_1.next(); !documents_1_1.done; documents_1_1 = documents_1.next()) {
                var document_1 = documents_1_1.value;
                this.add(document_1);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (documents_1_1 && !documents_1_1.done && (_a = documents_1.return)) _a.call(documents_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * Adds all the given documents to the index asynchronously.
     *
     * Returns a promise that resolves (to `undefined`) when the indexing is done.
     * This method is useful when index many documents, to avoid blocking the main
     * thread. The indexing is performed asynchronously and in chunks.
     *
     * @param documents  An array of documents to be indexed
     * @param options  Configuration options
     * @return A promise resolving to `undefined` when the indexing is done
     */
    MiniSearch.prototype.addAllAsync = function (documents, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var _a = options.chunkSize, chunkSize = _a === void 0 ? 10 : _a;
        var acc = { chunk: [], promise: Promise.resolve() };
        var _b = documents.reduce(function (_a, document, i) {
            var chunk = _a.chunk, promise = _a.promise;
            chunk.push(document);
            if ((i + 1) % chunkSize === 0) {
                return {
                    chunk: [],
                    promise: promise
                        .then(function () { return new Promise(function (resolve) { return setTimeout(resolve, 0); }); })
                        .then(function () { return _this.addAll(chunk); })
                };
            }
            else {
                return { chunk: chunk, promise: promise };
            }
        }, acc), chunk = _b.chunk, promise = _b.promise;
        return promise.then(function () { return _this.addAll(chunk); });
    };
    /**
     * Removes the given document from the index.
     *
     * The document to delete must NOT have changed between indexing and deletion,
     * otherwise the index will be corrupted. Therefore, when reindexing a document
     * after a change, the correct order of operations is:
     *
     *   1. remove old version
     *   2. apply changes
     *   3. index new version
     *
     * @param document  The document to be removed
     */
    MiniSearch.prototype.remove = function (document) {
        var e_4, _a, e_5, _b, e_6, _c;
        var _d = this._options, tokenize = _d.tokenize, processTerm = _d.processTerm, extractField = _d.extractField, fields = _d.fields, idField = _d.idField;
        var id = extractField(document, idField);
        if (id == null) {
            throw new Error("MiniSearch: document does not have ID field \"".concat(idField, "\""));
        }
        try {
            for (var _e = __values(this._documentIds), _f = _e.next(); !_f.done; _f = _e.next()) {
                var _g = __read(_f.value, 2), shortId = _g[0], longId = _g[1];
                if (id === longId) {
                    try {
                        for (var fields_2 = (e_5 = void 0, __values(fields)), fields_2_1 = fields_2.next(); !fields_2_1.done; fields_2_1 = fields_2.next()) {
                            var field = fields_2_1.value;
                            var fieldValue = extractField(document, field);
                            if (fieldValue == null)
                                continue;
                            var tokens = tokenize(fieldValue.toString(), field);
                            var fieldId = this._fieldIds[field];
                            var uniqueTerms = new Set(tokens).size;
                            this.removeFieldLength(shortId, fieldId, this._documentCount, uniqueTerms);
                            try {
                                for (var tokens_2 = (e_6 = void 0, __values(tokens)), tokens_2_1 = tokens_2.next(); !tokens_2_1.done; tokens_2_1 = tokens_2.next()) {
                                    var term = tokens_2_1.value;
                                    var processedTerm = processTerm(term, field);
                                    if (processedTerm) {
                                        this.removeTerm(fieldId, shortId, processedTerm);
                                    }
                                }
                            }
                            catch (e_6_1) { e_6 = { error: e_6_1 }; }
                            finally {
                                try {
                                    if (tokens_2_1 && !tokens_2_1.done && (_c = tokens_2.return)) _c.call(tokens_2);
                                }
                                finally { if (e_6) throw e_6.error; }
                            }
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (fields_2_1 && !fields_2_1.done && (_b = fields_2.return)) _b.call(fields_2);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                    this._storedFields.delete(shortId);
                    this._documentIds.delete(shortId);
                    this._fieldLength.delete(shortId);
                    this._documentCount -= 1;
                    return;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_4) throw e_4.error; }
        }
        throw new Error("MiniSearch: cannot remove document with ID ".concat(id, ": it is not in the index"));
    };
    /**
     * Removes all the given documents from the index. If called with no arguments,
     * it removes _all_ documents from the index.
     *
     * @param documents  The documents to be removed. If this argument is omitted,
     * all documents are removed. Note that, for removing all documents, it is
     * more efficient to call this method with no arguments than to pass all
     * documents.
     */
    MiniSearch.prototype.removeAll = function (documents) {
        var e_7, _a;
        if (documents) {
            try {
                for (var documents_2 = __values(documents), documents_2_1 = documents_2.next(); !documents_2_1.done; documents_2_1 = documents_2.next()) {
                    var document_2 = documents_2_1.value;
                    this.remove(document_2);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (documents_2_1 && !documents_2_1.done && (_a = documents_2.return)) _a.call(documents_2);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        else if (arguments.length > 0) {
            throw new Error('Expected documents to be present. Omit the argument to remove all documents.');
        }
        else {
            this._index = new SearchableMap();
            this._documentCount = 0;
            this._documentIds = new Map();
            this._fieldLength = new Map();
            this._avgFieldLength = [];
            this._storedFields = new Map();
            this._nextId = 0;
        }
    };
    /**
     * Search for documents matching the given search query.
     *
     * The result is a list of scored document IDs matching the query, sorted by
     * descending score, and each including data about which terms were matched and
     * in which fields.
     *
     * ### Basic usage:
     *
     * ```javascript
     * // Search for "zen art motorcycle" with default options: terms have to match
     * // exactly, and individual terms are joined with OR
     * miniSearch.search('zen art motorcycle')
     * // => [ { id: 2, score: 2.77258, match: { ... } }, { id: 4, score: 1.38629, match: { ... } } ]
     * ```
     *
     * ### Restrict search to specific fields:
     *
     * ```javascript
     * // Search only in the 'title' field
     * miniSearch.search('zen', { fields: ['title'] })
     * ```
     *
     * ### Field boosting:
     *
     * ```javascript
     * // Boost a field
     * miniSearch.search('zen', { boost: { title: 2 } })
     * ```
     *
     * ### Prefix search:
     *
     * ```javascript
     * // Search for "moto" with prefix search (it will match documents
     * // containing terms that start with "moto" or "neuro")
     * miniSearch.search('moto neuro', { prefix: true })
     * ```
     *
     * ### Fuzzy search:
     *
     * ```javascript
     * // Search for "ismael" with fuzzy search (it will match documents containing
     * // terms similar to "ismael", with a maximum edit distance of 0.2 term.length
     * // (rounded to nearest integer)
     * miniSearch.search('ismael', { fuzzy: 0.2 })
     * ```
     *
     * ### Combining strategies:
     *
     * ```javascript
     * // Mix of exact match, prefix search, and fuzzy search
     * miniSearch.search('ismael mob', {
     *  prefix: true,
     *  fuzzy: 0.2
     * })
     * ```
     *
     * ### Advanced prefix and fuzzy search:
     *
     * ```javascript
     * // Perform fuzzy and prefix search depending on the search term. Here
     * // performing prefix and fuzzy search only on terms longer than 3 characters
     * miniSearch.search('ismael mob', {
     *  prefix: term => term.length > 3
     *  fuzzy: term => term.length > 3 ? 0.2 : null
     * })
     * ```
     *
     * ### Combine with AND:
     *
     * ```javascript
     * // Combine search terms with AND (to match only documents that contain both
     * // "motorcycle" and "art")
     * miniSearch.search('motorcycle art', { combineWith: 'AND' })
     * ```
     *
     * ### Combine with AND_NOT:
     *
     * There is also an AND_NOT combinator, that finds documents that match the
     * first term, but do not match any of the other terms. This combinator is
     * rarely useful with simple queries, and is meant to be used with advanced
     * query combinations (see later for more details).
     *
     * ### Filtering results:
     *
     * ```javascript
     * // Filter only results in the 'fiction' category (assuming that 'category'
     * // is a stored field)
     * miniSearch.search('motorcycle art', {
     *   filter: (result) => result.category === 'fiction'
     * })
     * ```
     *
     * ### Advanced combination of queries:
     *
     * It is possible to combine different subqueries with OR, AND, and AND_NOT,
     * and even with different search options, by passing a query expression
     * tree object as the first argument, instead of a string.
     *
     * ```javascript
     * // Search for documents that contain "zen" and ("motorcycle" or "archery")
     * miniSearch.search({
     *   combineWith: 'AND',
     *   queries: [
     *     'zen',
     *     {
     *       combineWith: 'OR',
     *       queries: ['motorcycle', 'archery']
     *     }
     *   ]
     * })
     *
     * // Search for documents that contain ("apple" or "pear") but not "juice" and
     * // not "tree"
     * miniSearch.search({
     *   combineWith: 'AND_NOT',
     *   queries: [
     *     {
     *       combineWith: 'OR',
     *       queries: ['apple', 'pear']
     *     },
     *     'juice',
     *     'tree'
     *   ]
     * })
     * ```
     *
     * Each node in the expression tree can be either a string, or an object that
     * supports all `SearchOptions` fields, plus a `queries` array field for
     * subqueries.
     *
     * Note that, while this can become complicated to do by hand for complex or
     * deeply nested queries, it provides a formalized expression tree API for
     * external libraries that implement a parser for custom query languages.
     *
     * @param query  Search query
     * @param options  Search options. Each option, if not given, defaults to the corresponding value of `searchOptions` given to the constructor, or to the library default.
     */
    MiniSearch.prototype.search = function (query, searchOptions) {
        var e_8, _a;
        if (searchOptions === void 0) { searchOptions = {}; }
        var combinedResults = this.executeQuery(query, searchOptions);
        var results = [];
        try {
            for (var combinedResults_1 = __values(combinedResults), combinedResults_1_1 = combinedResults_1.next(); !combinedResults_1_1.done; combinedResults_1_1 = combinedResults_1.next()) {
                var _b = __read(combinedResults_1_1.value, 2), docId = _b[0], _c = _b[1], score = _c.score, terms = _c.terms, match = _c.match;
                // Final score takes into account the number of matching QUERY terms.
                // The end user will only receive the MATCHED terms.
                var quality = terms.length;
                var result = {
                    id: this._documentIds.get(docId),
                    score: score * quality,
                    terms: Object.keys(match),
                    match: match
                };
                Object.assign(result, this._storedFields.get(docId));
                if (searchOptions.filter == null || searchOptions.filter(result)) {
                    results.push(result);
                }
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (combinedResults_1_1 && !combinedResults_1_1.done && (_a = combinedResults_1.return)) _a.call(combinedResults_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        results.sort(byScore);
        return results;
    };
    /**
     * Provide suggestions for the given search query
     *
     * The result is a list of suggested modified search queries, derived from the
     * given search query, each with a relevance score, sorted by descending score.
     *
     * By default, it uses the same options used for search, except that by
     * default it performs prefix search on the last term of the query, and
     * combine terms with `'AND'` (requiring all query terms to match). Custom
     * options can be passed as a second argument. Defaults can be changed upon
     * calling the `MiniSearch` constructor, by passing a `autoSuggestOptions`
     * option.
     *
     * ### Basic usage:
     *
     * ```javascript
     * // Get suggestions for 'neuro':
     * miniSearch.autoSuggest('neuro')
     * // => [ { suggestion: 'neuromancer', terms: [ 'neuromancer' ], score: 0.46240 } ]
     * ```
     *
     * ### Multiple words:
     *
     * ```javascript
     * // Get suggestions for 'zen ar':
     * miniSearch.autoSuggest('zen ar')
     * // => [
     * //  { suggestion: 'zen archery art', terms: [ 'zen', 'archery', 'art' ], score: 1.73332 },
     * //  { suggestion: 'zen art', terms: [ 'zen', 'art' ], score: 1.21313 }
     * // ]
     * ```
     *
     * ### Fuzzy suggestions:
     *
     * ```javascript
     * // Correct spelling mistakes using fuzzy search:
     * miniSearch.autoSuggest('neromancer', { fuzzy: 0.2 })
     * // => [ { suggestion: 'neuromancer', terms: [ 'neuromancer' ], score: 1.03998 } ]
     * ```
     *
     * ### Filtering:
     *
     * ```javascript
     * // Get suggestions for 'zen ar', but only within the 'fiction' category
     * // (assuming that 'category' is a stored field):
     * miniSearch.autoSuggest('zen ar', {
     *   filter: (result) => result.category === 'fiction'
     * })
     * // => [
     * //  { suggestion: 'zen archery art', terms: [ 'zen', 'archery', 'art' ], score: 1.73332 },
     * //  { suggestion: 'zen art', terms: [ 'zen', 'art' ], score: 1.21313 }
     * // ]
     * ```
     *
     * @param queryString  Query string to be expanded into suggestions
     * @param options  Search options. The supported options and default values
     * are the same as for the `search` method, except that by default prefix
     * search is performed on the last term in the query, and terms are combined
     * with `'AND'`.
     * @return  A sorted array of suggestions sorted by relevance score.
     */
    MiniSearch.prototype.autoSuggest = function (queryString, options) {
        var e_9, _a, e_10, _b;
        if (options === void 0) { options = {}; }
        options = __assign(__assign({}, this._options.autoSuggestOptions), options);
        var suggestions = new Map();
        try {
            for (var _c = __values(this.search(queryString, options)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = _d.value, score = _e.score, terms = _e.terms;
                var phrase = terms.join(' ');
                var suggestion = suggestions.get(phrase);
                if (suggestion != null) {
                    suggestion.score += score;
                    suggestion.count += 1;
                }
                else {
                    suggestions.set(phrase, { score: score, terms: terms, count: 1 });
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_9) throw e_9.error; }
        }
        var results = [];
        try {
            for (var suggestions_1 = __values(suggestions), suggestions_1_1 = suggestions_1.next(); !suggestions_1_1.done; suggestions_1_1 = suggestions_1.next()) {
                var _f = __read(suggestions_1_1.value, 2), suggestion = _f[0], _g = _f[1], score = _g.score, terms = _g.terms, count = _g.count;
                results.push({ suggestion: suggestion, terms: terms, score: score / count });
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (suggestions_1_1 && !suggestions_1_1.done && (_b = suggestions_1.return)) _b.call(suggestions_1);
            }
            finally { if (e_10) throw e_10.error; }
        }
        results.sort(byScore);
        return results;
    };
    Object.defineProperty(MiniSearch.prototype, "documentCount", {
        /**
         * Number of documents in the index
         */
        get: function () {
            return this._documentCount;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Deserializes a JSON index (serialized with `JSON.stringify(miniSearch)`)
     * and instantiates a MiniSearch instance. It should be given the same options
     * originally used when serializing the index.
     *
     * ### Usage:
     *
     * ```javascript
     * // If the index was serialized with:
     * let miniSearch = new MiniSearch({ fields: ['title', 'text'] })
     * miniSearch.addAll(documents)
     *
     * const json = JSON.stringify(miniSearch)
     * // It can later be deserialized like this:
     * miniSearch = MiniSearch.loadJSON(json, { fields: ['title', 'text'] })
     * ```
     *
     * @param json  JSON-serialized index
     * @param options  configuration options, same as the constructor
     * @return An instance of MiniSearch deserialized from the given JSON.
     */
    MiniSearch.loadJSON = function (json, options) {
        if (options == null) {
            throw new Error('MiniSearch: loadJSON should be given the same options used when serializing the index');
        }
        return MiniSearch.loadJS(JSON.parse(json), options);
    };
    /**
     * Returns the default value of an option. It will throw an error if no option
     * with the given name exists.
     *
     * @param optionName  Name of the option
     * @return The default value of the given option
     *
     * ### Usage:
     *
     * ```javascript
     * // Get default tokenizer
     * MiniSearch.getDefault('tokenize')
     *
     * // Get default term processor
     * MiniSearch.getDefault('processTerm')
     *
     * // Unknown options will throw an error
     * MiniSearch.getDefault('notExisting')
     * // => throws 'MiniSearch: unknown option "notExisting"'
     * ```
     */
    MiniSearch.getDefault = function (optionName) {
        if (defaultOptions.hasOwnProperty(optionName)) {
            return getOwnProperty(defaultOptions, optionName);
        }
        else {
            throw new Error("MiniSearch: unknown option \"".concat(optionName, "\""));
        }
    };
    /**
     * @ignore
     */
    MiniSearch.loadJS = function (js, options) {
        var e_11, _a, e_12, _b;
        var index = js.index, documentCount = js.documentCount, nextId = js.nextId, documentIds = js.documentIds, fieldIds = js.fieldIds, fieldLength = js.fieldLength, averageFieldLength = js.averageFieldLength, storedFields = js.storedFields, serializationVersion = js.serializationVersion;
        if (serializationVersion !== 1 && serializationVersion !== 2) {
            throw new Error('MiniSearch: cannot deserialize an index created with an incompatible version');
        }
        var miniSearch = new MiniSearch(options);
        miniSearch._documentCount = documentCount;
        miniSearch._nextId = nextId;
        miniSearch._documentIds = objectToNumericMap(documentIds);
        miniSearch._fieldIds = fieldIds;
        miniSearch._fieldLength = objectToNumericMap(fieldLength);
        miniSearch._avgFieldLength = averageFieldLength;
        miniSearch._storedFields = objectToNumericMap(storedFields);
        miniSearch._index = new SearchableMap();
        try {
            for (var index_1 = __values(index), index_1_1 = index_1.next(); !index_1_1.done; index_1_1 = index_1.next()) {
                var _c = __read(index_1_1.value, 2), term = _c[0], data = _c[1];
                var dataMap = new Map();
                try {
                    for (var _d = (e_12 = void 0, __values(Object.keys(data))), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var fieldId = _e.value;
                        var indexEntry = data[fieldId];
                        // Version 1 used to nest the index entry inside a field called ds
                        if (serializationVersion === 1) {
                            indexEntry = indexEntry.ds;
                        }
                        dataMap.set(parseInt(fieldId, 10), objectToNumericMap(indexEntry));
                    }
                }
                catch (e_12_1) { e_12 = { error: e_12_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                    }
                    finally { if (e_12) throw e_12.error; }
                }
                miniSearch._index.set(term, dataMap);
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (index_1_1 && !index_1_1.done && (_a = index_1.return)) _a.call(index_1);
            }
            finally { if (e_11) throw e_11.error; }
        }
        return miniSearch;
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.executeQuery = function (query, searchOptions) {
        var _this = this;
        if (searchOptions === void 0) { searchOptions = {}; }
        if (typeof query !== 'string') {
            var options_1 = __assign(__assign(__assign({}, searchOptions), query), { queries: undefined });
            var results_1 = query.queries.map(function (subquery) { return _this.executeQuery(subquery, options_1); });
            return this.combineResults(results_1, query.combineWith);
        }
        var _a = this._options, tokenize = _a.tokenize, processTerm = _a.processTerm, globalSearchOptions = _a.searchOptions;
        var options = __assign(__assign({ tokenize: tokenize, processTerm: processTerm }, globalSearchOptions), searchOptions);
        var searchTokenize = options.tokenize, searchProcessTerm = options.processTerm;
        var terms = searchTokenize(query)
            .map(function (term) { return searchProcessTerm(term); })
            .filter(function (term) { return !!term; });
        var queries = terms.map(termToQuerySpec(options));
        var results = queries.map(function (query) { return _this.executeQuerySpec(query, options); });
        return this.combineResults(results, options.combineWith);
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.executeQuerySpec = function (query, searchOptions) {
        var e_13, _a, e_14, _b;
        var options = __assign(__assign({}, this._options.searchOptions), searchOptions);
        var boosts = (options.fields || this._options.fields).reduce(function (boosts, field) {
            var _a;
            return (__assign(__assign({}, boosts), (_a = {}, _a[field] = getOwnProperty(boosts, field) || 1, _a)));
        }, options.boost || {});
        var boostDocument = options.boostDocument, weights = options.weights, maxFuzzy = options.maxFuzzy;
        var _c = __assign(__assign({}, defaultSearchOptions.weights), weights), fuzzyWeight = _c.fuzzy, prefixWeight = _c.prefix;
        var data = this._index.get(query.term);
        var results = this.termResults(query.term, query.term, 1, data, boosts, boostDocument);
        var prefixMatches;
        var fuzzyMatches;
        if (query.prefix) {
            prefixMatches = this._index.atPrefix(query.term);
        }
        if (query.fuzzy) {
            var fuzzy = (query.fuzzy === true) ? 0.2 : query.fuzzy;
            var maxDistance = fuzzy < 1 ? Math.min(maxFuzzy, Math.round(query.term.length * fuzzy)) : fuzzy;
            if (maxDistance)
                fuzzyMatches = this._index.fuzzyGet(query.term, maxDistance);
        }
        if (prefixMatches) {
            try {
                for (var prefixMatches_1 = __values(prefixMatches), prefixMatches_1_1 = prefixMatches_1.next(); !prefixMatches_1_1.done; prefixMatches_1_1 = prefixMatches_1.next()) {
                    var _d = __read(prefixMatches_1_1.value, 2), term = _d[0], data_1 = _d[1];
                    var distance = term.length - query.term.length;
                    if (!distance) {
                        continue;
                    } // Skip exact match.
                    // Delete the term from fuzzy results (if present) if it is also a
                    // prefix result. This entry will always be scored as a prefix result.
                    fuzzyMatches === null || fuzzyMatches === void 0 ? void 0 : fuzzyMatches.delete(term);
                    // Weight gradually approaches 0 as distance goes to infinity, with the
                    // weight for the hypothetical distance 0 being equal to prefixWeight.
                    // The rate of change is much lower than that of fuzzy matches to
                    // account for the fact that prefix matches stay more relevant than
                    // fuzzy matches for longer distances.
                    var weight = prefixWeight * term.length / (term.length + 0.3 * distance);
                    this.termResults(query.term, term, weight, data_1, boosts, boostDocument, results);
                }
            }
            catch (e_13_1) { e_13 = { error: e_13_1 }; }
            finally {
                try {
                    if (prefixMatches_1_1 && !prefixMatches_1_1.done && (_a = prefixMatches_1.return)) _a.call(prefixMatches_1);
                }
                finally { if (e_13) throw e_13.error; }
            }
        }
        if (fuzzyMatches) {
            try {
                for (var _e = __values(fuzzyMatches.keys()), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var term = _f.value;
                    var _g = __read(fuzzyMatches.get(term), 2), data_2 = _g[0], distance = _g[1];
                    if (!distance) {
                        continue;
                    } // Skip exact match.
                    // Weight gradually approaches 0 as distance goes to infinity, with the
                    // weight for the hypothetical distance 0 being equal to fuzzyWeight.
                    var weight = fuzzyWeight * term.length / (term.length + distance);
                    this.termResults(query.term, term, weight, data_2, boosts, boostDocument, results);
                }
            }
            catch (e_14_1) { e_14 = { error: e_14_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_14) throw e_14.error; }
            }
        }
        return results;
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.combineResults = function (results, combineWith) {
        if (combineWith === void 0) { combineWith = OR; }
        if (results.length === 0) {
            return new Map();
        }
        var operator = combineWith.toLowerCase();
        return results.reduce(combinators[operator]) || new Map();
    };
    /**
     * Allows serialization of the index to JSON, to possibly store it and later
     * deserialize it with `MiniSearch.loadJSON`.
     *
     * Normally one does not directly call this method, but rather call the
     * standard JavaScript `JSON.stringify()` passing the `MiniSearch` instance,
     * and JavaScript will internally call this method. Upon deserialization, one
     * must pass to `loadJSON` the same options used to create the original
     * instance that was serialized.
     *
     * ### Usage:
     *
     * ```javascript
     * // Serialize the index:
     * let miniSearch = new MiniSearch({ fields: ['title', 'text'] })
     * miniSearch.addAll(documents)
     * const json = JSON.stringify(miniSearch)
     *
     * // Later, to deserialize it:
     * miniSearch = MiniSearch.loadJSON(json, { fields: ['title', 'text'] })
     * ```
     *
     * @return A plain-object serializeable representation of the search index.
     */
    MiniSearch.prototype.toJSON = function () {
        var e_15, _a, e_16, _b;
        var index = [];
        try {
            for (var _c = __values(this._index), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), term = _e[0], fieldIndex = _e[1];
                var data = {};
                try {
                    for (var fieldIndex_1 = (e_16 = void 0, __values(fieldIndex)), fieldIndex_1_1 = fieldIndex_1.next(); !fieldIndex_1_1.done; fieldIndex_1_1 = fieldIndex_1.next()) {
                        var _f = __read(fieldIndex_1_1.value, 2), fieldId = _f[0], freqs = _f[1];
                        data[fieldId] = Object.fromEntries(freqs);
                    }
                }
                catch (e_16_1) { e_16 = { error: e_16_1 }; }
                finally {
                    try {
                        if (fieldIndex_1_1 && !fieldIndex_1_1.done && (_b = fieldIndex_1.return)) _b.call(fieldIndex_1);
                    }
                    finally { if (e_16) throw e_16.error; }
                }
                index.push([term, data]);
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_15) throw e_15.error; }
        }
        return {
            documentCount: this._documentCount,
            nextId: this._nextId,
            documentIds: Object.fromEntries(this._documentIds),
            fieldIds: this._fieldIds,
            fieldLength: Object.fromEntries(this._fieldLength),
            averageFieldLength: this._avgFieldLength,
            storedFields: Object.fromEntries(this._storedFields),
            index: index,
            serializationVersion: 2
        };
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.termResults = function (sourceTerm, derivedTerm, termWeight, fieldTermData, fieldBoosts, boostDocumentFn, results) {
        var e_17, _a, e_18, _b, _c;
        if (results === void 0) { results = new Map(); }
        if (fieldTermData == null)
            return results;
        try {
            for (var _d = __values(Object.keys(fieldBoosts)), _e = _d.next(); !_e.done; _e = _d.next()) {
                var field = _e.value;
                var fieldBoost = fieldBoosts[field];
                var fieldId = this._fieldIds[field];
                var fieldTermFreqs = fieldTermData.get(fieldId);
                if (fieldTermFreqs == null)
                    continue;
                var matchingFields = fieldTermFreqs.size;
                var avgFieldLength = this._avgFieldLength[fieldId];
                try {
                    for (var _f = (e_18 = void 0, __values(fieldTermFreqs.keys())), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var docId = _g.value;
                        var docBoost = boostDocumentFn ? boostDocumentFn(this._documentIds.get(docId), derivedTerm) : 1;
                        if (!docBoost)
                            continue;
                        var termFreq = fieldTermFreqs.get(docId);
                        var fieldLength = this._fieldLength.get(docId)[fieldId];
                        // NOTE: The total number of fields is set to the number of documents
                        // `this._documentCount`. It could also make sense to use the number of
                        // documents where the current field is non-blank as a normalisation
                        // factor. This will make a difference in scoring if the field is rarely
                        // present. This is currently not supported, and may require further
                        // analysis to see if it is a valid use case.
                        var rawScore = calcBM25Score(termFreq, matchingFields, this._documentCount, fieldLength, avgFieldLength);
                        var weightedScore = termWeight * fieldBoost * docBoost * rawScore;
                        var result = results.get(docId);
                        if (result) {
                            result.score += weightedScore;
                            assignUniqueTerm(result.terms, sourceTerm);
                            var match = getOwnProperty(result.match, derivedTerm);
                            if (match) {
                                match.push(field);
                            }
                            else {
                                result.match[derivedTerm] = [field];
                            }
                        }
                        else {
                            results.set(docId, {
                                score: weightedScore,
                                terms: [sourceTerm],
                                match: (_c = {}, _c[derivedTerm] = [field], _c)
                            });
                        }
                    }
                }
                catch (e_18_1) { e_18 = { error: e_18_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_18) throw e_18.error; }
                }
            }
        }
        catch (e_17_1) { e_17 = { error: e_17_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_17) throw e_17.error; }
        }
        return results;
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.addTerm = function (fieldId, documentId, term) {
        var indexData = this._index.fetch(term, createMap);
        var fieldIndex = indexData.get(fieldId);
        if (fieldIndex == null) {
            fieldIndex = new Map();
            fieldIndex.set(documentId, 1);
            indexData.set(fieldId, fieldIndex);
        }
        else {
            var docs = fieldIndex.get(documentId);
            fieldIndex.set(documentId, (docs || 0) + 1);
        }
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.removeTerm = function (fieldId, documentId, term) {
        if (!this._index.has(term)) {
            this.warnDocumentChanged(documentId, fieldId, term);
            return;
        }
        var indexData = this._index.fetch(term, createMap);
        var fieldIndex = indexData.get(fieldId);
        if (fieldIndex == null || fieldIndex.get(documentId) == null) {
            this.warnDocumentChanged(documentId, fieldId, term);
        }
        else if (fieldIndex.get(documentId) <= 1) {
            if (fieldIndex.size <= 1) {
                indexData.delete(fieldId);
            }
            else {
                fieldIndex.delete(documentId);
            }
        }
        else {
            fieldIndex.set(documentId, fieldIndex.get(documentId) - 1);
        }
        if (this._index.get(term).size === 0) {
            this._index.delete(term);
        }
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.warnDocumentChanged = function (shortDocumentId, fieldId, term) {
        var e_19, _a;
        if (console == null || console.warn == null) {
            return;
        }
        try {
            for (var _b = __values(Object.keys(this._fieldIds)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var fieldName = _c.value;
                if (this._fieldIds[fieldName] === fieldId) {
                    console.warn("MiniSearch: document with ID ".concat(this._documentIds.get(shortDocumentId), " has changed before removal: term \"").concat(term, "\" was not present in field \"").concat(fieldName, "\". Removing a document after it has changed can corrupt the index!"));
                    return;
                }
            }
        }
        catch (e_19_1) { e_19 = { error: e_19_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_19) throw e_19.error; }
        }
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.addDocumentId = function (documentId) {
        var shortDocumentId = this._nextId;
        this._documentIds.set(shortDocumentId, documentId);
        this._documentCount += 1;
        this._nextId += 1;
        return shortDocumentId;
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.addFields = function (fields) {
        for (var i = 0; i < fields.length; i++) {
            this._fieldIds[fields[i]] = i;
        }
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.addFieldLength = function (documentId, fieldId, count, length) {
        var fieldLengths = this._fieldLength.get(documentId);
        if (fieldLengths == null)
            this._fieldLength.set(documentId, fieldLengths = []);
        fieldLengths[fieldId] = length;
        var averageFieldLength = this._avgFieldLength[fieldId] || 0;
        var totalFieldLength = (averageFieldLength * count) + length;
        this._avgFieldLength[fieldId] = totalFieldLength / (count + 1);
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.removeFieldLength = function (documentId, fieldId, count, length) {
        var totalFieldLength = (this._avgFieldLength[fieldId] * count) - length;
        this._avgFieldLength[fieldId] = totalFieldLength / (count - 1);
    };
    /**
     * @ignore
     */
    MiniSearch.prototype.saveStoredFields = function (documentId, doc) {
        var e_20, _a;
        var _b = this._options, storeFields = _b.storeFields, extractField = _b.extractField;
        if (storeFields == null || storeFields.length === 0) {
            return;
        }
        var documentFields = this._storedFields.get(documentId);
        if (documentFields == null)
            this._storedFields.set(documentId, documentFields = {});
        try {
            for (var storeFields_1 = __values(storeFields), storeFields_1_1 = storeFields_1.next(); !storeFields_1_1.done; storeFields_1_1 = storeFields_1.next()) {
                var fieldName = storeFields_1_1.value;
                var fieldValue = extractField(doc, fieldName);
                if (fieldValue !== undefined)
                    documentFields[fieldName] = fieldValue;
            }
        }
        catch (e_20_1) { e_20 = { error: e_20_1 }; }
        finally {
            try {
                if (storeFields_1_1 && !storeFields_1_1.done && (_a = storeFields_1.return)) _a.call(storeFields_1);
            }
            finally { if (e_20) throw e_20.error; }
        }
    };
    return MiniSearch;
}());
var getOwnProperty = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property) ? object[property] : undefined;
};
var combinators = (_a = {},
    _a[OR] = function (a, b) {
        var e_21, _a;
        try {
            for (var _b = __values(b.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var docId = _c.value;
                var existing = a.get(docId);
                if (existing == null) {
                    a.set(docId, b.get(docId));
                }
                else {
                    var _d = b.get(docId), score = _d.score, terms = _d.terms, match = _d.match;
                    existing.score = existing.score + score;
                    existing.match = Object.assign(existing.match, match);
                    assignUniqueTerms(existing.terms, terms);
                }
            }
        }
        catch (e_21_1) { e_21 = { error: e_21_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_21) throw e_21.error; }
        }
        return a;
    },
    _a[AND] = function (a, b) {
        var e_22, _a;
        var combined = new Map();
        try {
            for (var _b = __values(b.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var docId = _c.value;
                var existing = a.get(docId);
                if (existing == null)
                    continue;
                var _d = b.get(docId), score = _d.score, terms = _d.terms, match = _d.match;
                assignUniqueTerms(existing.terms, terms);
                combined.set(docId, {
                    score: existing.score + score,
                    terms: existing.terms,
                    match: Object.assign(existing.match, match)
                });
            }
        }
        catch (e_22_1) { e_22 = { error: e_22_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_22) throw e_22.error; }
        }
        return combined;
    },
    _a[AND_NOT] = function (a, b) {
        var e_23, _a;
        try {
            for (var _b = __values(b.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var docId = _c.value;
                a.delete(docId);
            }
        }
        catch (e_23_1) { e_23 = { error: e_23_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_23) throw e_23.error; }
        }
        return a;
    },
    _a);
// https://en.wikipedia.org/wiki/Okapi_BM25
// https://opensourceconnections.com/blog/2015/10/16/bm25-the-next-generation-of-lucene-relevation/
var k = 1.2; // Term frequency saturation point. Recommended values are between 1.2 and 2.
var b = 0.7; // Length normalization impact. Recommended values are around 0.75.
var d = 0.5; // BM25+ frequency normalization lower bound. Recommended values are between 0.5 and 1.
var calcBM25Score = function (termFreq, matchingCount, totalCount, fieldLength, avgFieldLength) {
    var invDocFreq = Math.log(1 + (totalCount - matchingCount + 0.5) / (matchingCount + 0.5));
    return invDocFreq * (d + termFreq * (k + 1) / (termFreq + k * (1 - b + b * fieldLength / avgFieldLength)));
};
var termToQuerySpec = function (options) { return function (term, i, terms) {
    var fuzzy = (typeof options.fuzzy === 'function')
        ? options.fuzzy(term, i, terms)
        : (options.fuzzy || false);
    var prefix = (typeof options.prefix === 'function')
        ? options.prefix(term, i, terms)
        : (options.prefix === true);
    return { term: term, fuzzy: fuzzy, prefix: prefix };
}; };
var defaultOptions = {
    idField: 'id',
    extractField: function (document, fieldName) { return document[fieldName]; },
    tokenize: function (text, fieldName) { return text.split(SPACE_OR_PUNCTUATION); },
    processTerm: function (term, fieldName) { return term.toLowerCase(); },
    fields: undefined,
    searchOptions: undefined,
    storeFields: []
};
var defaultSearchOptions = {
    combineWith: OR,
    prefix: false,
    fuzzy: false,
    maxFuzzy: 6,
    boost: {},
    weights: { fuzzy: 0.45, prefix: 0.375 }
};
var defaultAutoSuggestOptions = {
    combineWith: AND,
    prefix: function (term, i, terms) {
        return i === terms.length - 1;
    }
};
var assignUniqueTerm = function (target, term) {
    // Avoid adding duplicate terms.
    if (!target.includes(term))
        target.push(term);
};
var assignUniqueTerms = function (target, source) {
    var e_24, _a;
    try {
        for (var source_1 = __values(source), source_1_1 = source_1.next(); !source_1_1.done; source_1_1 = source_1.next()) {
            var term = source_1_1.value;
            // Avoid adding duplicate terms.
            if (!target.includes(term))
                target.push(term);
        }
    }
    catch (e_24_1) { e_24 = { error: e_24_1 }; }
    finally {
        try {
            if (source_1_1 && !source_1_1.done && (_a = source_1.return)) _a.call(source_1);
        }
        finally { if (e_24) throw e_24.error; }
    }
};
var byScore = function (_a, _b) {
    var a = _a.score;
    var b = _b.score;
    return b - a;
};
var createMap = function () { return new Map(); };
var objectToNumericMap = function (object) {
    var e_25, _a;
    var map = new Map();
    try {
        for (var _b = __values(Object.keys(object)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            map.set(parseInt(key, 10), object[key]);
        }
    }
    catch (e_25_1) { e_25 = { error: e_25_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_25) throw e_25.error; }
    }
    return map;
};
// This regular expression matches any Unicode space or punctuation character
// Adapted from https://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7BZ%7D%5Cp%7BP%7D&abb=on&c=on&esc=on
var SPACE_OR_PUNCTUATION = /[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u;

const DATA = {
  userSets: [],
  userParts: new Map()
};
const setSearch = new MiniSearch({ idField: 'id', fields: ['id', 'name'], storeFields: ['id', 'name'] });
new Modal(document.querySelector('.modal'), {});

const setStatus = (status) => {
  document.querySelector('.status').textContent = status;
};
const fetchData = async () => {
  setStatus('Loading data..');
  // const files = [
  //   'themes',
  //   'colors',
  //   'part_categories',
  //   'parts',
  //   'part_relationships',
  //   'elements',
  //   'sets',
  //   'minifigs',
  //   'inventories',
  //   'inventory_parts',
  //   'inventory_sets',
  //   'inventory_minifigs'
  // ]
  // console.log('files', files)
  // for (const file of files) {
  //   const req = await window.fetch(`data/${file}.json`)
  //   DATA[file] = await req.json()
  // }
  // setStatus('Processing data')
  // console.log('Data loaded', DATA)

  DATA.sets = (await (await window.fetch('data/processed_sets.csv')).text()).substring(2).split('\ns,').map(s => {
    const parts = s.split('\n');
    const setDetails = parts.shift().split(',');
    const partsObj = parts.map(p => {
      const partDetails = p.split(',');
      return { partId: partDetails[0], quantity: parseInt(partDetails[1]), color: partDetails[2], isSpare: partDetails[3] === 't' }
    });
    const partsMap = new Map(partsObj.filter(p => !p.isSpare).map(p => [p.partId, p.quantity]));

    return {
      id: setDetails[0],
      name: setDetails[1],
      partsUsed: parseInt(setDetails[2]),
      partsTotal: parseInt(setDetails[3]),
      parts: partsObj,
      partsMap
    }
  });
  console.log('rawSetData', DATA.sets);

  setStatus('Data loaded');
  console.log('Data processed', DATA);
};
const setUserParts = () => {
  const userSets = DATA.userSets.map(i => {
    const set = DATA.sets.find(s => s.id === i);
    return set
  });
  console.log('userSets', userSets);

  DATA.userParts = new Map();
  for (const set of userSets) {
    for (const part of set.parts) {
      const existingPart = DATA.userParts.get(part.partId);
      if (existingPart) {
        DATA.userParts.set(part.partId, existingPart + part.quantity);
      } else {
        DATA.userParts.set(part.partId, part.quantity);
      }
    }
  }
};
const clearResultsList = () => {
  document.querySelector('.results-list').innerHTML = '';
};
const listResultClickHandler = (e) => {
  const result = parseInt(e.target.closest('tr').getAttribute('data-result'));
  console.log('result', result);
  // modal.show()
};
const createList = () => {
  console.log('createList', DATA.userSets);
  setStatus('Preparing user parts');

  disableCreateListButton();
  clearResultsList();
  setUserParts();

  console.log('userParts', DATA.userParts);

  setStatus('Creating list');
  let results = [];
  for (let i = 0; i < DATA.sets.length; i++) {
    const set = DATA.sets[i];
    let got = 0;
    let notEnough = 0;
    const notEnoughParts = [];
    let not = 0;
    const notParts = [];

    for (const [partId, quantity] of set.partsMap) {
      const userPart = DATA.userParts.get(partId);
      if (userPart === undefined) {
        not += quantity;
        notParts.push({ partId, quantity });
      } else if (userPart < quantity) {
        notEnough += quantity;
        notEnoughParts.push({ partId, quantity });
      } else {
        got += quantity;
      }
    }
    console.log('createList', i + 1, 'of', DATA.sets.length, 'got:', got, 'notEnough:', notEnough, 'not:', not, set);
    if (not <= 20 && set.partsUsed >= 30) {
      let resultClass = '';
      if (notEnough === 0 && not === 0) {
        resultClass = 'table-success';
      }
      results.push({
        id: set.id,
        name: set.name,
        partsUsed: set.partsUsed,
        got,
        notEnough,
        notEnoughParts,
        not,
        notParts,
        resultClass
      });
    }
  }
  results = results.sort((a, b) => a.not - b.not);
  console.log('results', results);

  const tableRowsHtml = results.map((r, i) => `
    <tr class="${r.resultClass}" data-result="${i}">
      <th scope="row">${r.id}</th>
      <td>${r.name}</td>
      <td><img class="img-fluid" src="https://cdn.rebrickable.com/media/sets/${r.id.toLowerCase()}.jpg" /></td>
      <td>${r.got}</td>
      <td>${r.notEnough}</td>
      <td>${r.not}</td>
    </tr>
  `).join('');
  const tableHtml = `<table class="table table-striped table-hover">
  <thead>
    <tr>
      <th scope="col">#</th>
      <th scope="col">Name</th>
      <th scope="col">Image</th>
      <th scope="col">Got</th>
      <th scope="col">Not enough</th>
      <th scope="col">Not</th>
    </tr>
  </thead>
  <tbody>
    ${tableRowsHtml}
  </tbody>`;

  document.querySelectorAll('.results-list tr').forEach((result) => {
    result.removeEventListener('click', listResultClickHandler);
  });

  document.querySelector('.results-list').innerHTML = tableHtml;

  document.querySelectorAll('.results-list tr').forEach((result) => {
    result.addEventListener('click', listResultClickHandler);
  });
};
const bindCreateListButton = () => {
  document.querySelector('.create-list').addEventListener('click', createList);
};
const enableCreateListButton = () => {
  document.querySelector('.create-list').classList.remove('disabled');
};
const disableCreateListButton = () => {
  document.querySelector('.create-list').classList.add('disabled');
};

const removeSet = (id) => {
  console.log('removeSet', id);
  DATA.userSets = DATA.userSets.filter(s => s !== id);
  refreshUserSets();
  saveUserSets();
  clearResultsList();
};

const removeSetClickHandler = (e) => {
  const result = e.target.closest('.item');
  removeSet(result.getAttribute('data-set-id'));
};

const loadUserSets = () => {
  const storageItem = window.localStorage.getItem('what-can-i-build-user-sets');
  if (storageItem === null) {
    return
  }
  DATA.userSets = JSON.parse(storageItem);
  refreshUserSets();
};
const saveUserSets = () => {
  window.localStorage.setItem('what-can-i-build-user-sets', JSON.stringify(DATA.userSets));
};
const refreshUserSets = () => {
  const itemsArea = document.querySelector('.user-inventory');

  const itemsHtml = DATA.userSets.map(i => createItemHtml(DATA.sets.find(s => s.id === i), 'Remove')).join('');
  console.log('refreshUserSets', DATA.userSets);

  // Remove previously added click handlers
  document.querySelectorAll('.user-inventory .item').forEach((drop) => {
    drop.removeEventListener('click', removeSetClickHandler);
  });
  // Set HTML
  itemsArea.innerHTML = itemsHtml;
  // Add new click handlers
  document.querySelectorAll('.user-inventory .item').forEach((result) => {
    result.addEventListener('click', removeSetClickHandler);
  });

  if (DATA.userSets.length > 0) {
    document.querySelector('.user-inventory-count').textContent = DATA.userSets.length;
    enableCreateListButton();
  } else {
    document.querySelector('.user-inventory-count').textContent = '';
    disableCreateListButton();
  }
};
const addSet = (id) => {
  console.log('addSet', id);
  if (!DATA.userSets.includes(id)) {
    DATA.userSets.push(id);
    refreshUserSets();
    saveUserSets();
    clearResultsList();
  }
};

const addSetClickHandler = (e) => {
  const result = e.target.closest('.item');
  addSet(result.getAttribute('data-set-id'));
};
const createItemHtml = (r, cta) => {
  return `
  <div class="col-md-2 col-4 item" data-set-id="${r.id}">
    <img class="img-fluid" src="https://cdn.rebrickable.com/media/sets/${r.id.toLowerCase()}.jpg"> 
    <p>${r.name} - ${r.id}</p>
    <div class="item-add">
      <button type="button" class="btn btn-primary">${cta}</button>
    </div>
  </div>
  `
};
const bindAddSetOptions = async () => {
  setStatus('Adding set select options');
  setSearch.addAll(DATA.sets);
  // console.log('results', setSearch.search('tractor'), setSearch.search('2621-2'))
  const resultArea = document.querySelector('.user-inventory-select-results');
  document.querySelector('.user-inventory-select').addEventListener('keyup', function (e) {
    const searchTerm = encodeURIComponent(this.value);
    const results = setSearch.search(searchTerm).slice(0, 18);

    const resultHtml = results.map(r => createItemHtml(r, 'Add')).join('');
    console.log('results', searchTerm, results);

    // Remove previously added click handlers
    document.querySelectorAll('.user-inventory-select-results .item').forEach((drop) => {
      drop.removeEventListener('click', addSetClickHandler);
    });
    // Set HTML
    resultArea.innerHTML = resultHtml;
    // Add new click handlers
    document.querySelectorAll('.user-inventory-select-results .item').forEach((result) => {
      result.addEventListener('click', addSetClickHandler);
    });
  });
};
const init = async () => {
  console.log('init');
  await fetchData();
  loadUserSets();
  await bindAddSetOptions();
  bindCreateListButton();
  enableCreateListButton();
  setStatus('Ready');
};

init();
